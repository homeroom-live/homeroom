type User {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # Info
  auth0Id: String! @unique
  username: String! @unique
  email: String! @unique
  email_verified: Boolean! @default(value: false)

  # Meta
  name: String
  gender: Gender!
  bio: String!
  url: String
  picture: File @relation(name: "UserPicture", onDelete: CASCADE)
  video: File @relation(name: "UserVideo", onDelete: CASCADE)
  # isTeacher: Boolean

  # Stripe
  stripeId: String @unique
  stripeCustomerId: String @unique

  # classes: [Class!]! @relation(name: "UserClasses")
  # taughtClasses: [Class!]! @relation(name: "UserTaughtClasses")
  teaching_classrooms: [Classroom!]!
    @relation(name: "ClassroomTeacher", onDelete: CASCADE)
  studying_classrooms: [Classroom!]!
    @relation(name: "ClassroomStudent", onDelete: SET_NULL)

  followers: [Follow!]! @relation(name: "UserFollowed", onDelete: CASCADE)
  following: [Follow!]! @relation(name: "UserFollowing", onDelete: CASCADE)
  # activities: [Activity!]! @relation(name: "UserActivities")
  messages: [Message!]! @relation(name: "UserMessages", onDelete: CASCADE)
  charges: [Charge!]! @relation(name: "UserCharges", onDelete: CASCADE)
  # refunds: [Refund!]! @relation(name: "UserRefunds")

  # Settings
  receiveNotifications: Boolean! @default(value: "true")

  # System
  archieved: Boolean! @default(value: "false")
}

type Follow {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  user_following: User! @relation(name: "UserFollowing", onDelete: SET_NULL)
  user_followed: User! @relation(name: "UserFollowed", onDelete: SET_NULL)
}

type Classroom {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  description: String!
  price: Float! @deafult(value: "0")
  classes: [Class!]! @relation(name: "ClassroomClass", onDelete: CASCADE)

  teacher: User! @relation(name: "ClassroomTeacher", onDelete: SET_NULL)
  students: [User!]! @relation(name: "ClassroomStudent", onDelete: SET_NULL)

  # System
  archieved: Boolean! @default(value: "false")
}

type Class {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  # Info
  name: String!
  description: String!
  price: Float! @default(value: "0")
  picture: File @relation(name: "ClassPicture", onDelete: CASCADE)
  video: File @relation(name: "ClassVideo", onDelete: CASCADE)

  # Stream
  schedule: DateTime
  duration: Int # in minutes
  live: Boolean! @default(value: "false")
  vod: File @relation(name: "ClassVod", onDelete: CASCADE)

  # Extras
  messages: [Message!]! @relation(name: "ClassMessage", onDelete: CASCADE)
  files: [File!]! @relation(name: "ClassFiles", onDelete: CASCADE)

  # Specs
  # teachers: [User!]! @relation(name: "UserTaughtClasses")
  # students: [User!]! @relation(name: "UserClasses")
  # studentsCount: Int
  classroom: Classroom! @relation(name: "ClassroomClass", onDelete: SET_NULL)
  # activities: [Activity!]! @relation(name: "ClassActivities")
  # charges: [Charge!]! @relation(name: "ClassCharges")
  # refunds: [Refund!]! @relation(name: "ClassRefunds")

  # System
  archieved: Boolean! @default(value: "false")
}

type File {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  secret: String! @unique
  contentType: String!

  # System
  archieved: Boolean! @default(value: "false")
}

type Message {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  text: String!
  sender: User! @relation(name: "UserMessages", onDelete: SET_NULL)
  class: Class! @relation(name: "ClassMessage", onDelete: SET_NULL)

  # response: Response @relation(name: "MessageResponse", onDelete: CASCADE)

  # System
  archieved: Boolean! @default(value: "false")
}

# type Response {
#   id: ID! @unique
#   createdAt: DateTime!
#   updatedAt: DateTime!

#   time: Int!

# # System
#   archieved: Boolean! @default(value: "false")
# }

type Charge {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  amount: Float!
  stripeId: String! @unique

  class: Class! @relation(name: "ClassCharges", onDelete: SET_NULL)
  user: User! @relation(name: "UserCharges", onDelete: SET_NULL)

  refund: Refund @relation(name: "ChargeRefund", onDelete: CASCADE)

  # System
  archieved: Boolean! @default(value: "false")
}

type Refund {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  stripeId: String! @unique
  amount: Float!
  charge: Charge! @relation(name: "ChargeRefund", onDelete: SET_NULL)
  # TODO: some of this can be omitted
  # class: Class! @relation(name: "ClassRefunds")
  # user: User! @relation(name: "UserRefunds")

  # System
  archieved: Boolean! @default(value: "false")
}

#
# type Activity {
#   text: String!
#   user: User! @relation(name: "UserActivities")
#   classroom: Classroom! @relation(name: "ClassroomActivities")
#   class: Class! @relation(name: "ClassActivities")
# }
