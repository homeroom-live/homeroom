# import Class, Classroom, File, Gender from '../schemas/prisma.graphql'

scalar Upload

type Query {
  viewer: Viewer # DONE
  # me: User
  user(username: String!): User! # DONE
  # isFollowing(username: String!): Boolean!
  # isClassStudent(classId: ID!): Boolean!
  # isClassStudentOrTeacher(classroomId: ID!): Boolean!
  # userDefaultCard: Json
  # userStats(username: String): Json
  # userStripeUrl: String

  class(id: ID!): Class # DONE
  # myClasses(first: Int): [Class!]!
  # myTaughtClasses(first: Int): [Class!]!
  # classes(
  #   where: ClassWhereInput
  #   orderBy: ClassOrderByInput
  #   skip: Int
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): [Class!]!
  liveClasses: [Class!]! # DONE
  classroom(id: ID!): Classroom # DONE
  # liveClassrooms: [Classroom!]!

  messages(classId: ID!, last: Int): [Message!]! # DONE
  # messages(
  #   classroomId: ID!
  #   where: MessageWhereInput
  #   orderBy: MessageOrderByInput
  #   skip: Int
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): [Message]!
}

type Mutation {
  createUser(receiveNotifications: Boolean!): User
  updateUser(data: UserUpdateInput!): User!
  updateUserWithFiles(
    data: UserUpdateInput!
    video: Upload
    picture: Upload
    removeFiles: [Json]
  ): User!
  follow(username: String!): Viewer
  unfollow(username: String!): Viewer

  # Stripe
  createStripeAccount(code: String!): User!
  createStripeCustomer(token: String!): User!
  updateStripeCustomer(token: String!): User!

  # Classes
  createClass(data: ClassCreateInput!): Class!
  updateClass(id: ID!, data: ClassUpdateInput!): Class!
  deleteClass(id: ID!): Class!

  # Classroom
  createClassroom(data: ClassroomCreateInput!): Classroom! # TODO: security
  updateClassroom(id: ID!, data: ClassroomUpdateInput!): Classroom! # TODO: security
  joinClassroom(id: ID!): Classroom! # DONE
  leaveClassroom(id: ID): Classroom! # DONE
  createMessage(data: MessageCreateInput!): Message!

  createCharge(amount: Float!, teacherId: ID!, classId: ID!): Charge!
  createRefund(classId: ID!): Refund!

  uploadFile(upload: Upload!): File!
  uploadClassFiles(classId: ID!, uploads: [Upload!]!): [File!]!
  uploadClassVideo(classId: ID!, upload: Upload!): File!
  removeFile(file: FileWhereUniqueInput!): File!
  removeFiles(files: FileUpdateManyWithoutClassInput!): [File!]!
}

type Subscription {
  message(classroomId: ID!): MessageSubscriptionPayload
}

# Payloads

type Viewer {
  user: User
  requiresSetup: Boolean!
}

# Types

type User {
  id: ID!

  # Info
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  picture(where: FileWhereInput): File!
  video(where: FileWhereInput): File

  # Stripe
  stripeId: String # Additional resolver
  stripeCustomerId: String # Additional resolver
  stripeURL: String # Additional resolver
  defaultCard: DefaultCard # Additional resolver
  charges: UserCharges!
  refunds: UserRefunds!

  # Teacher
  taught_classrooms: UserTaughtClassrooms! # Additional resolver
  studying_classrooms: UserStudyingClassrooms! # Additional resolver
  # Social
  followers: UserFollowers! # Additional resolver
  following: UserFollowing! # Additional resolver
  messages: [Message!]
}

type UserCharges {
  charges: [Charge!]
  count: Int!
}

type UserRefunds {
  refunds: [Refund!]!
  count: Int!
}

type UserTaughtClassrooms {
  classrooms: [Classroom!]!
  count: Int!
}

type UserStudyingClassrooms {
  classrooms: [Classroom!]!
  count: Int!
}

type UserFollowers {
  followers: [User!]!
  count: Int!
  followed_by_viewer: Boolean!
}

type UserFollowing {
  following: [User!]!
  count: Int!
  following_viewer: Boolean!
}

type DefaultCard {
  last4: String!
  expMonth: String!
  expYear: String!
  brand: String!
}

type Classroom {
  id: ID!

  name: String!
  description: String!
  price: Float!
  classes: ClassroomClasses!

  teacher: User!
  students: ClassroomStudents!
}

type ClassroomStudents {
  count: Int!
  students: [User!]!
  studied_by_viewer: Boolean!
}

type ClassroomClasses {
  count: Int!
  classes: [Class!]!
}

type Class {
  id: ID!

  name: String!
  description: String!
  picture: String
  price: Float!
  startDate: DateTime

  # Stream
  live: Boolean!
  duration: Int
  video: File

  # Specs
  files: [File!]!
  vods: File!
  classroom: Classroom!
  messages: ClassMessages!
}

type ClassMessages {
  count: Int!
  messages: [Message!]!
}

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  text: String!
  sender: User!
  class: Class!
}

type Charge {
  id: ID! @unique
  createdAt: DateTime!
  updatedAt: DateTime!

  amount: Float!
  class: Class!
  user: User!
  refund: Refund
}

type Refund {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  amount: Float!
  charge: Charge!
}

type File {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  secret: String
  contentType: String
  url: String!
}
