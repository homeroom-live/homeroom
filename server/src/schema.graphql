# import Gender from './generated/prisma.graphql'

scalar Upload

type Query {
  viewer: Viewer
  user(username: String!): User!
  lesson(id: ID!): Lesson
}

type Mutation {
  # User
  updateProfile(
    name: String!
    username: String
    bio: String!
    picture: Upload
    price: Float
    receiveNotifications: Boolean!
  ): User
  deleteProfile: User
  # Stripe
  createStripeAccount(code: String!): Viewer
  createStripeCustomer(token: String!): Viewer
  updateStripeCustomer(token: String!): Viewer
  # Subscriptions
  subscribe(classroomID: ID!): User # TODO
  unsubscribe(classroomID: ID!): User # TODO
  # Lessons
  createLesson(
    name: String!
    description: String!
    schedule: DateTime
    premium: Boolean
    files: [Upload!]!
    course: CourseInput
  ): Lesson
  updateLesson(
    id: ID!
    name: String
    description: String
    schedule: DateTime
    premium: Boolean
    course: CourseInput
  ): Lesson
  addLessonFiles(id: ID!, files: [Upload!]!): Lesson
  removeLessonFile(id: ID!, fileId: ID!): Lesson
  deleteLesson(id: ID!): Lesson
  goLive(id: ID!): Lesson
  # Course
  createCourse(name: String!, lessons: [ID!]!): Course
  updateCourse(id: ID!, name: String, lessons: [ID!]!): Course
  deleteCourse(id: ID!): Course
  # Message
  createMessage(lessonId: ID!, text: String!): Message
}

# Payloads -------------------------------------------------------------------

type Viewer {
  explore: Explore!
  user: User
  requiresSetup: Boolean
}

type Explore {
  featuredClassroomsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): FeaturedClassroomsConnection!
  liveLessonsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): LiveLessonsConnection!
  hottestLessonsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): HottestLessonsConnection!
  subscribedLessonsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): SubscribedLessonsConnection
}

# Inputs ---------------------------------------------------------------------

input CourseInput {
  create: String
  connect: ID
}

# Types ----------------------------------------------------------------------

type User {
  id: ID!

  # Live

  live: Lesson

  # Info

  name: String!
  username: String!
  email: String!
  bio: String
  picture: Picture
  price: Float

  # Stripe

  stripeId: String
  stripeCustomerId: String
  stripeURL: String
  defaultCard: DefaultCard

  # Lessons

  lessonsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserLessonsConnection!
  coursesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserCoursesConnection!

  # Subscriptions

  classroomSubscriptionsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserClassroomSubscriptionsConnection!

  # Settings

  receiveNotifications: Boolean!

  # Viewer

  is_viewer_subscribed_to: Boolean!
}

type DefaultCard {
  last4: String!
  expMonth: String!
  expYear: String!
  brand: String!
}

type Lesson {
  id: ID!

  # Info

  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime
  premium: Boolean!

  teacher: User!

  course: Course

  # Stream

  streamKey: String!
  streamURL: String!
  isLive: Boolean!

  # Extras

  messagesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): LessonMessagesConnection!
  filesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): LessonFilesConnection!
}

type Course {
  id: ID!

  name: String!
  lessonsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): CourseLessonsConnection!
}

type File {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  contentType: String!
  url: String!
}

type Picture {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  contentType: String!
  url(height: Int, width: Int): String!
}

type Message {
  id: ID!
  createdAt: DateTime!
  text: String!
  sender: User!
  is_viewer_message: Boolean!
  is_teacher_message: Boolean!
}

# Connections ----------------------------------------------------------------

# Explore

type FeaturedClassroomsConnection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  aggregate: AggregateUser!
}

type LiveLessonsConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge!]!
  aggregate: AggregateLesson!
}

type HottestLessonsConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge!]!
  aggregate: AggregateLesson!
}

type SubscribedLessonsConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge!]!
  aggregate: AggregateLesson!
}

# User

type UserLessonsConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

type UserCoursesConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge!]!
  aggregate: AggregateCourse!
}

type UserClassroomSubscriptionsConnection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  aggregate: AggregateUser!
}

# Lesson

type LessonMessagesConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge!]!
  aggregate: AggregateMessage!
}

type LessonFilesConnection {
  pageInfo: PageInfo!
  edges: [FileEdge!]!
  aggregate: AggregateFile!
}

# Course

type CourseLessonsConnection {
  pageInfo: PageInfo!
  edges: [LessonEdge!]!
  aggregate: AggregateLesson!
}

# Edges ----------------------------------------------------------------------

type UserEdge {
  cursor: String!
  node: User!
}

type LessonEdge {
  node: Lesson!
  cursor: String!
}

type CourseEdge {
  node: Course!
  cursor: String!
}

type FileEdge {
  cursor: String!
  node: File!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

# Aggregations ---------------------------------------------------------------

type AggregateUser {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

# Utils ----------------------------------------------------------------------

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
