# import Gender from './generated/prisma.graphql'

scalar Upload

type Query {
  viewer: Viewer # DONE
  # me: User
  user(username: String!): User! # DONE
  # isFollowing(username: String!): Boolean!
  # isClassStudent(classId: ID!): Boolean!
  # isClassStudentOrTeacher(classroomId: ID!): Boolean!
  # userDefaultCard: Json
  # userStats(username: String): Json
  # userStripeUrl: String
  # Class
  class(id: ID!): Class # DONE
  # myClasses(first: Int): [Class!]!
  # myTaughtClasses(first: Int): [Class!]!
  # classes(
  #   where: ClassWhereInput
  #   orderBy: ClassOrderByInput
  #   skip: Int
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): [Class!]!
  allClasses: AllClasses!
  liveClasses: LiveClasses! # DONE
  upcomingClasses: UpcomingClasses! # DONE
  recordedClasses: RecordedClasses! # DONE
  # Classroom
  classroom(id: ID!): Classroom # DONE
  # liveClassrooms: [Classroom!]!

  messages(classId: ID!, last: Int): [Message!] # DONE
  # messages(
  #   classroomId: ID!
  #   where: MessageWhereInput
  #   orderBy: MessageOrderByInput
  #   skip: Int
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): [Message]!
}

type Viewer {
  user: User
  requiresSetup: Boolean!
}

type AllClasses {
  classes(first: Int, skip: Int): [Class!]!
  count: Int!
}

type LiveClasses {
  classes(first: Int, skip: Int): [Class!]!
  count: Int!
}

type RecordedClasses {
  classes(first: Int, skip: Int): [Class!]!
  count(first: Int, skip: Int): Int!
}

type UpcomingClasses {
  classes(first: Int, skip: Int): [Class!]!
  count: Int!
}

type Mutation {
  createUser(
    name: String!
    bio: String!
    picture: Upload
    video: Upload
    receiveNotifications: Boolean!
  ): Viewer
  updateUser(
    name: String
    bio: String
    picture: Upload
    video: Upload
    receiveNotifications: Boolean
  ): Viewer
  # updateUserWithFiles(
  #   data: UserUpdateInput!
  #   video: Upload
  #   picture: Upload
  #   removeFiles: [Json]
  # ): User!
  follow(username: String!): Viewer # DONE
  unfollow(username: String!): Viewer # DONE
  # Stripe
  createStripeAccount(code: String!): Viewer # DONE
  createStripeCustomer(token: String!): Viewer # DONE
  updateStripeCustomer(token: String!): Viewer # DONE
  # Classes
  createClass(
    classroomId: ID!
    name: String!
    description: String!
    picture: Upload
    video: Upload
    price: Float!
    schedule: DateTime
    files: [Upload!]
  ): Class! # DONE
  updateClass(
    id: ID!
    name: String
    description: String
    picture: Upload
    video: Upload
    price: Float
    schedule: DateTime
    files: [Upload!]
  ): Class # DONE
  deleteClass(id: ID!): Class # DONE
  goLive(classId: ID!): Class # DONE
  # Classroom
  createClassroom(name: String!, description: String!, price: Float!): Classroom # DONE
  updateClassroom(
    id: ID!
    name: String
    description: String
    price: Float
  ): Classroom # DONE
  joinClassroom(id: ID!): Classroom # DONE
  leaveClassroom(id: ID): Classroom # DONE
  # Message
  createMessage(classId: ID!, text: String!): Message! # DONE
  createCharge(amount: Float!, teacherId: ID!, classId: ID!): Charge! # Why do we need createCharge
  createRefund(chargeId: ID!): Refund # Needs work
  # Files
  # uploadFile(upload: Upload!): File!
  # uploadClassFiles(classId: ID!, uploads: [Upload!]!): Class
  # uploadClassVideo(classId: ID!, upload: Upload!): File!
  # Move to webhooks
  # removeFile(file: FileWhereUniqueInput!): File!
  # removeFiles(files: FileUpdateManyWithoutClassInput!): [File!]!
}

type Subscription {
  message(classroomId: ID!): MessageSubscriptionPayload
}

# Types

type User {
  id: ID!

  # Info
  username: String!
  email: String!
  email_verified: Boolean
  name: String
  gender: Gender!
  description: String
  url: String
  picture: File
  video: File

  # Stripe
  stripeId: String # Additional resolver
  stripeCustomerId: String # Additional resolver
  stripeURL: String # Additional resolver
  defaultCard: DefaultCard # Additional resolver
  charges: UserCharges!
  refunds: UserRefunds!

  # Teacher
  teaching_classrooms: UserTeachingClassrooms! # Additional resolver
  studying_classrooms: UserStudyingClassrooms! # Additional resolver
  # Social
  followers: UserFollowers! # Additional resolver
  following: UserFollowing! # Additional resolver
  messages: [Message!]
}

type UserCharges {
  charges: [Charge!]
  count: Int!
}

type UserRefunds {
  refunds: [Refund!]!
  count: Int!
}

type UserTeachingClassrooms {
  classrooms: [Classroom!]!
  count: Int!
}

type UserStudyingClassrooms {
  classrooms: [Classroom!]!
  count: Int!
}

type UserFollowers {
  followers: [User!]!
  count: Int!
  followed_by_viewer: Boolean!
}

type UserFollowing {
  following: [User!]!
  count: Int!
  following_viewer: Boolean!
}

type DefaultCard {
  last4: String!
  expMonth: String!
  expYear: String!
  brand: String!
}

type Classroom {
  id: ID!

  name: String!
  description: String!
  price: Float!
  classes: ClassroomClasses!

  teacher: User!
  students: ClassroomStudents!
}

type ClassroomStudents {
  count: Int!
  students: [User!]!
  studied_by_viewer: Boolean!
}

type ClassroomClasses {
  count: Int!
  classes: [Class!]!
}

type Class {
  id: ID!

  name: String!
  description: String!
  picture: File
  price: Float!
  schedule: DateTime

  # Stream
  live: Boolean!
  duration: Int
  video: File

  # Specs
  files: [File!]!
  vod: File
  classroom: Classroom!
  messages: ClassMessages!
}

type ClassMessages {
  count: Int!
  messages: [Message!]!
}

type Message {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  text: String!
  sender: User!
  class: Class!
}

type Charge {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  amount: Float!
  class: Class!
  user: User!
  refund: Refund
}

type Refund {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  amount: Float!
  charge: Charge!
}

type File {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!

  name: String!
  secret: String!
  contentType: String!
  url: String!
}
