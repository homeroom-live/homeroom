# import Class, Classroom, File, Gender from '../schemas/prisma.graphql'

scalar Upload

type Query {
  viewer: Viewer
  # me: User
  user(username: String!): User!
  # isFollowing(username: String!): Boolean!
  # isClassStudent(classId: ID!): Boolean!
  # isClassStudentOrTeacher(classroomId: ID!): Boolean!
  # userDefaultCard: Json
  # userStats(username: String): Json
  # userStripeUrl: String

  class(id: ID!): Class!
  # myClasses(first: Int): [Class!]!
  # myTaughtClasses(first: Int): [Class!]!
  # classes(
  #   where: ClassWhereInput
  #   orderBy: ClassOrderByInput
  #   skip: Int
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): [Class!]!
  liveClasses: [Class!]!

  classroom(id: ID!): Classroom
  # liveClassrooms: [Classroom!]!

  messages(classroomId: ID!, last: Int): [Message!]!
  # messages(
  #   classroomId: ID!
  #   where: MessageWhereInput
  #   orderBy: MessageOrderByInput
  #   skip: Int
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): [Message]!
}

type Mutation {
  createUser(): User
  updateUser(data: UserUpdateInput!): User!
  updateUserWithFiles(
    data: UserUpdateInput!
    video: Upload
    picture: Upload
    removeFiles: [Json]
  ): User!
  follow(username: String!): User!
  unfollow(username: String!): User!
  # Stripe
  createStripeAccount(code: String!): User!
  createStripeCustomer(token: String!): User!
  updateStripeCustomer(token: String!): User!

  # Classes
  createClass(data: ClassCreateInput!): Class!
  updateClass(id: ID!, data: ClassUpdateInput!): Class!
  deleteClass(id: ID!): Class!
  joinClass(id: ID!, studentsCount: Int!): Class!
  leaveClass(id: ID!, studentsCount: Int!): Class!

  # Classroom
  createClassroom(data: ClassroomCreateInput!): Classroom!
  updateClassroom(id: ID!, data: ClassroomUpdateInput!): Classroom!

  createMessage(data: MessageCreateInput!): Message!

  createCharge(amount: Float!, teacherId: ID!, classId: ID!): Charge!
  createRefund(classId: ID!): Refund!

  uploadFile(upload: Upload!): File!
  uploadClassFiles(classId: ID!, uploads: [Upload!]!): [File!]!
  uploadClassVideo(classId: ID!, upload: Upload!): File!
  removeFile(file: FileWhereUniqueInput!): File!
  removeFiles(files: FileUpdateManyWithoutClassInput!): [File!]!
}

type Subscription {
  message(classroomId: ID!): MessageSubscriptionPayload
}

# Payloads

type Viewer {
  user: User
  requiresSetup: Boolean!
}

# Types

type User {
  id: ID!

  # Info
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  picture(where: FileWhereInput): File!
  video(where: FileWhereInput): File

  # Stripe
  stripeId: String # Additional resolver
  stripeCustomerId: String # Additional resolver
  stripeURL: String # Additional resolver
  defaultCard: DefaultCard # Additional resolver
  charges: [Charge!]
  refunds: [Refund!]

  # Teacher
  classrooms: UserClassrooms! # Additional resolver

  # Social
  followers: UserFollowers! # Additional resolver
  following: UserFollowing! # Additional resolver
  messages: [Message!]
}

type UserClassrooms { 
  classrooms: [Classroom!]!
  count: Int!
}

type UserFollowers { 
  followers: [User!]!
  count: Int!
}

type UserFollowing { 
  following: [User!]!
  count: Int!
}

type DefaultCard {
  last4: String!
  expMonth: String!
  expYear: String!
  brand: String!
}

