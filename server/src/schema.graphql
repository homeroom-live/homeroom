# import Gender from './generated/prisma.graphql'

scalar Upload

type Query {
  viewer: Viewer
  # User
  user(username: String!): User!
  # Classroom
  classroom(id: ID!): Classroom
  # Class
  class(id: ID!): Class
  allClasses(
    after: String
    before: String
    first: Int
    last: Int
  ): AllClassesConnection!
  liveClasses(
    after: String
    before: String
    first: Int
    last: Int
  ): LiveClassesConnection!
  upcomingClasses(
    after: String
    before: String
    first: Int
    last: Int
  ): UpcomingClassesConnection!
  recordedClasses(
    after: String
    before: String
    first: Int
    last: Int
  ): RecordedClassesConnection!
}

type Mutation {
  # User
  createUser(
    name: String!
    bio: String!
    picture: Upload
    video: Upload
    receiveNotifications: Boolean!
  ): Viewer
  updateUser(
    name: String
    bio: String
    picture: Upload
    video: Upload
    receiveNotifications: Boolean
  ): Viewer
  deleteUser: User
  follow(username: String!): Viewer
  unfollow(username: String!): Viewer
  # Stripe - TODO: Might cause problems
  createStripeAccount(code: String!): Viewer
  createStripeCustomer(token: String!): Viewer
  updateStripeCustomer(token: String!): Viewer
  # Classroom
  createClassroom(name: String!, description: String!, price: Float!): Classroom
  updateClassroom(
    id: ID!
    name: String
    description: String
    price: Float
  ): Classroom
  deleteClassroom(id: ID!): Classroom
  joinClassroom(id: ID!): Classroom
  leaveClassroom(id: ID): Classroom
  # Classes
  createClass(
    classroomId: ID!
    name: String!
    description: String!
    picture: Upload
    video: Upload
    price: Float!
    schedule: DateTime
    files: [Upload!]!
  ): Class!
  updateClass(
    id: ID!
    name: String
    description: String
    picture: Upload
    video: Upload
    price: Float
    schedule: DateTime
    files: [Upload!]!
  ): Class
  deleteClass(id: ID!): Class
  goLive(classId: ID!): Class
  # Message
  createMessage(classId: ID!, text: String!): Message!
  # Charges
  createCharge(amount: Float!, teacherId: ID!, classId: ID!): Charge! # Why do we need createCharge
  createRefund(chargeId: ID!): Refund # Needs work
}

# Payloads -------------------------------------------------------------------

type Viewer {
  user: User
  requiresSetup: Boolean!
}

# Types ----------------------------------------------------------------------

type User {
  id: ID!

  # Meta
  username: String!
  email: String!
  email_verified: Boolean
  gender: Gender!

  # Info
  name: String!
  description: String
  url: String
  picture: Picture
  video: File

  # Stripe
  stripeId: String
  stripeCustomerId: String
  stripeURL: String
  defaultCard: DefaultCard
  chargesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserChargesConnection!
  refundsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserRefundsConnection!

  # Teacher
  teachingClassroomsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserTeachingClassroomsConnection!
  studyingClassroomsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserStudyingClassroomsConnection!

  # Social
  followersConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserFollowersConnection!
  followingConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): UserFollowingConnection!
}

type DefaultCard {
  last4: String!
  expMonth: String!
  expYear: String!
  brand: String!
}

type Classroom {
  id: ID!

  name: String!
  description: String!
  price: Float!
  classesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ClassroomClassesConnection!

  teacher: User!
  studentsConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ClassroomStudentsConnection!
}

type Class {
  id: ID!

  # Info
  name: String!
  description: String!
  price: Float!
  picture: Picture
  schedule: DateTime

  # Stream
  live: Boolean!
  duration: Int
  video: File

  # Specs
  files: [File!]!
  vod: File
  classroom: Classroom!

  # Social
  messagesConnection(
    after: String
    before: String
    first: Int
    last: Int
  ): ClassMessagesConnection!
}

# Sub Types

type Message {
  id: ID!
  createdAt: DateTime!
  text: String!
  sender: User!
}

type Charge {
  id: ID!
  createdAt: DateTime!
  amount: Float!
  class: Class!
  user: User!
  refund: Refund
}

type Refund {
  id: ID!
  createdAt: DateTime!
  amount: Float!
  charge: Charge!
}

type File {
  id: ID!
  name: String!
  contentType: String!
  url: String!
}

type Picture {
  id: ID!
  name: String!
  contentType: String!
  url(height: Int, width: Int): String!
}

# Connections and Edges ------------------------------------------------------

# User

type UserFollowersConnection {
  pageInfo: PageInfo!
  followers: [UserEdge!]!
  aggregate: AggregateUser!
}

type UserFollowingConnection {
  pageInfo: PageInfo!
  following: [UserEdge!]!
  aggregate: AggregateUser!
}

type UserEdge {
  cursor: String!
  followed_by_viewer: Boolean! # TODO
  following_viewer: Boolean! # TODO
  node: User!
}

type AggregateUser {
  count: Int!
}

# Class

type AllClassesConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge!]!
  aggregate: AggregateClass!
}

type LiveClassesConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge!]!
  aggregate: AggregateClass!
}

type RecordedClassesConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge!]!
  aggregate: AggregateClass!
}

type UpcomingClassesConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge!]!
  aggregate: AggregateClass!
}

type ClassEdge {
  node: Class!
  cursor: String!
}

type AggregateClass {
  count: Int!
}

# Classroom

type ClassroomStudentsConnection {
  pageInfo: PageInfo!
  edges: [UserEdge!]!
  aggregate: AggregateUser!
}

type ClassroomClassesConnection {
  pageInfo: PageInfo!
  edges: [ClassEdge!]!
  aggregate: AggregateClass!
}

type UserTeachingClassroomsConnection {
  pageInfo: PageInfo!
  edges: [ClassroomEdge]!
  aggregate: AggregateClassroom!
}

type UserStudyingClassroomsConnection {
  pageInfo: PageInfo!
  classrooms: [ClassroomEdge!]!
  aggregate: AggregateClassroom!
}

type ClassroomEdge {
  node: Classroom!
  studied_by_viewer: Boolean! # TODO
  cursor: String!
}

type AggregateClassroom {
  count: Int!
}

# Charges

type UserChargesConnection {
  pageInfo: PageInfo!
  edges: [ChargeEdge!]
  aggregate: AggregateCharge!
}

type AggregateCharge {
  count: Int!
}

type ChargeEdge {
  cursor: String!
  node: Charge!
}

# Refunds

type UserRefundsConnection {
  pageInfo: PageInfo!
  edges: [RefundEdge!]!
  aggregate: AggregateRefund!
}

type RefundEdge {
  cursor: String!
  node: Refund!
}

type AggregateRefund {
  count: Int!
}

# Messages

type ClassMessagesConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge!]!
  aggregate: AggregateMessage!
}

type MessageEdge {
  cursor: String!
  is_viewer_message: Boolean! # TODO
  node: Message!
}

type AggregateMessage {
  count: Int!
}

# Utils ----------------------------------------------------------------------

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
