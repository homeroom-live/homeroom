# source: https://eu1.prisma.sh/matic-zavadlal-03c51f/homeroom-setup/dev
# timestamp: Thu Jun 14 2018 11:13:31 GMT+0200 (CEST)

type AggregateCharge {
  count: Int!
}

type AggregateClass {
  count: Int!
}

type AggregateClassroom {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFollow {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateRefund {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Charge implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Float!
  stripeId: String!
  class(where: ClassWhereInput): Class!
  user(where: UserWhereInput): User!
  refund(where: RefundWhereInput): Refund
}

"""A connection to a list of items."""
type ChargeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChargeEdge]!
  aggregate: AggregateCharge!
}

input ChargeCreateInput {
  amount: Float!
  stripeId: String!
  class: ClassCreateOneInput!
  user: UserCreateOneWithoutChargesInput!
  refund: RefundCreateOneWithoutChargeInput
}

input ChargeCreateManyWithoutUserInput {
  create: [ChargeCreateWithoutUserInput!]
  connect: [ChargeWhereUniqueInput!]
}

input ChargeCreateOneWithoutRefundInput {
  create: ChargeCreateWithoutRefundInput
  connect: ChargeWhereUniqueInput
}

input ChargeCreateWithoutRefundInput {
  amount: Float!
  stripeId: String!
  class: ClassCreateOneInput!
  user: UserCreateOneWithoutChargesInput!
}

input ChargeCreateWithoutUserInput {
  amount: Float!
  stripeId: String!
  class: ClassCreateOneInput!
  refund: RefundCreateOneWithoutChargeInput
}

"""An edge in a connection."""
type ChargeEdge {
  """The item at the end of the edge."""
  node: Charge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChargeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  amount_ASC
  amount_DESC
  stripeId_ASC
  stripeId_DESC
}

type ChargePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  amount: Float!
  stripeId: String!
}

type ChargeSubscriptionPayload {
  mutation: MutationType!
  node: Charge
  updatedFields: [String!]
  previousValues: ChargePreviousValues
}

input ChargeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChargeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChargeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChargeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChargeWhereInput
}

input ChargeUpdateInput {
  amount: Float
  stripeId: String
  class: ClassUpdateOneInput
  user: UserUpdateOneWithoutChargesInput
  refund: RefundUpdateOneWithoutChargeInput
}

input ChargeUpdateManyWithoutUserInput {
  create: [ChargeCreateWithoutUserInput!]
  connect: [ChargeWhereUniqueInput!]
  disconnect: [ChargeWhereUniqueInput!]
  delete: [ChargeWhereUniqueInput!]
  update: [ChargeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ChargeUpsertWithWhereUniqueWithoutUserInput!]
}

input ChargeUpdateOneWithoutRefundInput {
  create: ChargeCreateWithoutRefundInput
  connect: ChargeWhereUniqueInput
  delete: Boolean
  update: ChargeUpdateWithoutRefundDataInput
  upsert: ChargeUpsertWithoutRefundInput
}

input ChargeUpdateWithoutRefundDataInput {
  amount: Float
  stripeId: String
  class: ClassUpdateOneInput
  user: UserUpdateOneWithoutChargesInput
}

input ChargeUpdateWithoutUserDataInput {
  amount: Float
  stripeId: String
  class: ClassUpdateOneInput
  refund: RefundUpdateOneWithoutChargeInput
}

input ChargeUpdateWithWhereUniqueWithoutUserInput {
  where: ChargeWhereUniqueInput!
  data: ChargeUpdateWithoutUserDataInput!
}

input ChargeUpsertWithoutRefundInput {
  update: ChargeUpdateWithoutRefundDataInput!
  create: ChargeCreateWithoutRefundInput!
}

input ChargeUpsertWithWhereUniqueWithoutUserInput {
  where: ChargeWhereUniqueInput!
  update: ChargeUpdateWithoutUserDataInput!
  create: ChargeCreateWithoutUserInput!
}

input ChargeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChargeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChargeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChargeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  stripeId: String

  """All values that are not equal to given value."""
  stripeId_not: String

  """All values that are contained in given list."""
  stripeId_in: [String!]

  """All values that are not contained in given list."""
  stripeId_not_in: [String!]

  """All values less than the given value."""
  stripeId_lt: String

  """All values less than or equal the given value."""
  stripeId_lte: String

  """All values greater than the given value."""
  stripeId_gt: String

  """All values greater than or equal the given value."""
  stripeId_gte: String

  """All values containing the given string."""
  stripeId_contains: String

  """All values not containing the given string."""
  stripeId_not_contains: String

  """All values starting with the given string."""
  stripeId_starts_with: String

  """All values not starting with the given string."""
  stripeId_not_starts_with: String

  """All values ending with the given string."""
  stripeId_ends_with: String

  """All values not ending with the given string."""
  stripeId_not_ends_with: String
  class: ClassWhereInput
  user: UserWhereInput
  refund: RefundWhereInput
}

input ChargeWhereUniqueInput {
  id: ID
  stripeId: String
}

type Class implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  picture: String
  price: Float!
  startDate: DateTime
  live: Boolean!
  duration: Int
  video(where: FileWhereInput): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  vods(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  classroom(where: ClassroomWhereInput): Classroom!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

"""A connection to a list of items."""
type ClassConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassEdge]!
  aggregate: AggregateClass!
}

input ClassCreateInput {
  name: String!
  description: String!
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileCreateOneInput
  files: FileCreateManyInput
  vods: FileCreateManyInput
  classroom: ClassroomCreateOneWithoutClassesInput!
  messages: MessageCreateManyWithoutClassInput
}

input ClassCreateManyWithoutClassroomInput {
  create: [ClassCreateWithoutClassroomInput!]
  connect: [ClassWhereUniqueInput!]
}

input ClassCreateOneInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
}

input ClassCreateOneWithoutMessagesInput {
  create: ClassCreateWithoutMessagesInput
  connect: ClassWhereUniqueInput
}

input ClassCreateWithoutClassroomInput {
  name: String!
  description: String!
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileCreateOneInput
  files: FileCreateManyInput
  vods: FileCreateManyInput
  messages: MessageCreateManyWithoutClassInput
}

input ClassCreateWithoutMessagesInput {
  name: String!
  description: String!
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileCreateOneInput
  files: FileCreateManyInput
  vods: FileCreateManyInput
  classroom: ClassroomCreateOneWithoutClassesInput!
}

"""An edge in a connection."""
type ClassEdge {
  """The item at the end of the edge."""
  node: Class!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  picture_ASC
  picture_DESC
  price_ASC
  price_DESC
  startDate_ASC
  startDate_DESC
  live_ASC
  live_DESC
  duration_ASC
  duration_DESC
}

type ClassPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  picture: String
  price: Float!
  startDate: DateTime
  live: Boolean!
  duration: Int
}

type Classroom implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  price: Float!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class!]
  teacher(where: UserWhereInput): User!
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type ClassroomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ClassroomEdge]!
  aggregate: AggregateClassroom!
}

input ClassroomCreateInput {
  name: String!
  description: String!
  price: Float!
  classes: ClassCreateManyWithoutClassroomInput
  teacher: UserCreateOneWithoutTaught_classroomsInput!
  students: UserCreateManyWithoutStudying_classroomsInput
}

input ClassroomCreateManyWithoutStudentsInput {
  create: [ClassroomCreateWithoutStudentsInput!]
  connect: [ClassroomWhereUniqueInput!]
}

input ClassroomCreateManyWithoutTeacherInput {
  create: [ClassroomCreateWithoutTeacherInput!]
  connect: [ClassroomWhereUniqueInput!]
}

input ClassroomCreateOneWithoutClassesInput {
  create: ClassroomCreateWithoutClassesInput
  connect: ClassroomWhereUniqueInput
}

input ClassroomCreateWithoutClassesInput {
  name: String!
  description: String!
  price: Float!
  teacher: UserCreateOneWithoutTaught_classroomsInput!
  students: UserCreateManyWithoutStudying_classroomsInput
}

input ClassroomCreateWithoutStudentsInput {
  name: String!
  description: String!
  price: Float!
  classes: ClassCreateManyWithoutClassroomInput
  teacher: UserCreateOneWithoutTaught_classroomsInput!
}

input ClassroomCreateWithoutTeacherInput {
  name: String!
  description: String!
  price: Float!
  classes: ClassCreateManyWithoutClassroomInput
  students: UserCreateManyWithoutStudying_classroomsInput
}

"""An edge in a connection."""
type ClassroomEdge {
  """The item at the end of the edge."""
  node: Classroom!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ClassroomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
}

type ClassroomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  price: Float!
}

type ClassroomSubscriptionPayload {
  mutation: MutationType!
  node: Classroom
  updatedFields: [String!]
  previousValues: ClassroomPreviousValues
}

input ClassroomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassroomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassroomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassroomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassroomWhereInput
}

input ClassroomUpdateInput {
  name: String
  description: String
  price: Float
  classes: ClassUpdateManyWithoutClassroomInput
  teacher: UserUpdateOneWithoutTaught_classroomsInput
  students: UserUpdateManyWithoutStudying_classroomsInput
}

input ClassroomUpdateManyWithoutStudentsInput {
  create: [ClassroomCreateWithoutStudentsInput!]
  connect: [ClassroomWhereUniqueInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  delete: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutStudentsInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutStudentsInput!]
}

input ClassroomUpdateManyWithoutTeacherInput {
  create: [ClassroomCreateWithoutTeacherInput!]
  connect: [ClassroomWhereUniqueInput!]
  disconnect: [ClassroomWhereUniqueInput!]
  delete: [ClassroomWhereUniqueInput!]
  update: [ClassroomUpdateWithWhereUniqueWithoutTeacherInput!]
  upsert: [ClassroomUpsertWithWhereUniqueWithoutTeacherInput!]
}

input ClassroomUpdateOneWithoutClassesInput {
  create: ClassroomCreateWithoutClassesInput
  connect: ClassroomWhereUniqueInput
  delete: Boolean
  update: ClassroomUpdateWithoutClassesDataInput
  upsert: ClassroomUpsertWithoutClassesInput
}

input ClassroomUpdateWithoutClassesDataInput {
  name: String
  description: String
  price: Float
  teacher: UserUpdateOneWithoutTaught_classroomsInput
  students: UserUpdateManyWithoutStudying_classroomsInput
}

input ClassroomUpdateWithoutStudentsDataInput {
  name: String
  description: String
  price: Float
  classes: ClassUpdateManyWithoutClassroomInput
  teacher: UserUpdateOneWithoutTaught_classroomsInput
}

input ClassroomUpdateWithoutTeacherDataInput {
  name: String
  description: String
  price: Float
  classes: ClassUpdateManyWithoutClassroomInput
  students: UserUpdateManyWithoutStudying_classroomsInput
}

input ClassroomUpdateWithWhereUniqueWithoutStudentsInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUpdateWithoutStudentsDataInput!
}

input ClassroomUpdateWithWhereUniqueWithoutTeacherInput {
  where: ClassroomWhereUniqueInput!
  data: ClassroomUpdateWithoutTeacherDataInput!
}

input ClassroomUpsertWithoutClassesInput {
  update: ClassroomUpdateWithoutClassesDataInput!
  create: ClassroomCreateWithoutClassesInput!
}

input ClassroomUpsertWithWhereUniqueWithoutStudentsInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUpdateWithoutStudentsDataInput!
  create: ClassroomCreateWithoutStudentsInput!
}

input ClassroomUpsertWithWhereUniqueWithoutTeacherInput {
  where: ClassroomWhereUniqueInput!
  update: ClassroomUpdateWithoutTeacherDataInput!
  create: ClassroomCreateWithoutTeacherInput!
}

input ClassroomWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassroomWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassroomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassroomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  classes_every: ClassWhereInput
  classes_some: ClassWhereInput
  classes_none: ClassWhereInput
  teacher: UserWhereInput
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
}

input ClassroomWhereUniqueInput {
  id: ID
}

type ClassSubscriptionPayload {
  mutation: MutationType!
  node: Class
  updatedFields: [String!]
  previousValues: ClassPreviousValues
}

input ClassSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ClassWhereInput
}

input ClassUpdateDataInput {
  name: String
  description: String
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileUpdateOneInput
  files: FileUpdateManyInput
  vods: FileUpdateManyInput
  classroom: ClassroomUpdateOneWithoutClassesInput
  messages: MessageUpdateManyWithoutClassInput
}

input ClassUpdateInput {
  name: String
  description: String
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileUpdateOneInput
  files: FileUpdateManyInput
  vods: FileUpdateManyInput
  classroom: ClassroomUpdateOneWithoutClassesInput
  messages: MessageUpdateManyWithoutClassInput
}

input ClassUpdateManyWithoutClassroomInput {
  create: [ClassCreateWithoutClassroomInput!]
  connect: [ClassWhereUniqueInput!]
  disconnect: [ClassWhereUniqueInput!]
  delete: [ClassWhereUniqueInput!]
  update: [ClassUpdateWithWhereUniqueWithoutClassroomInput!]
  upsert: [ClassUpsertWithWhereUniqueWithoutClassroomInput!]
}

input ClassUpdateOneInput {
  create: ClassCreateInput
  connect: ClassWhereUniqueInput
  delete: Boolean
  update: ClassUpdateDataInput
  upsert: ClassUpsertNestedInput
}

input ClassUpdateOneWithoutMessagesInput {
  create: ClassCreateWithoutMessagesInput
  connect: ClassWhereUniqueInput
  delete: Boolean
  update: ClassUpdateWithoutMessagesDataInput
  upsert: ClassUpsertWithoutMessagesInput
}

input ClassUpdateWithoutClassroomDataInput {
  name: String
  description: String
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileUpdateOneInput
  files: FileUpdateManyInput
  vods: FileUpdateManyInput
  messages: MessageUpdateManyWithoutClassInput
}

input ClassUpdateWithoutMessagesDataInput {
  name: String
  description: String
  picture: String
  price: Float
  startDate: DateTime
  live: Boolean
  duration: Int
  video: FileUpdateOneInput
  files: FileUpdateManyInput
  vods: FileUpdateManyInput
  classroom: ClassroomUpdateOneWithoutClassesInput
}

input ClassUpdateWithWhereUniqueWithoutClassroomInput {
  where: ClassWhereUniqueInput!
  data: ClassUpdateWithoutClassroomDataInput!
}

input ClassUpsertNestedInput {
  update: ClassUpdateDataInput!
  create: ClassCreateInput!
}

input ClassUpsertWithoutMessagesInput {
  update: ClassUpdateWithoutMessagesDataInput!
  create: ClassCreateWithoutMessagesInput!
}

input ClassUpsertWithWhereUniqueWithoutClassroomInput {
  where: ClassWhereUniqueInput!
  update: ClassUpdateWithoutClassroomDataInput!
  create: ClassCreateWithoutClassroomInput!
}

input ClassWhereInput {
  """Logical AND on all given filters."""
  AND: [ClassWhereInput!]

  """Logical OR on all given filters."""
  OR: [ClassWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ClassWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  startDate: DateTime

  """All values that are not equal to given value."""
  startDate_not: DateTime

  """All values that are contained in given list."""
  startDate_in: [DateTime!]

  """All values that are not contained in given list."""
  startDate_not_in: [DateTime!]

  """All values less than the given value."""
  startDate_lt: DateTime

  """All values less than or equal the given value."""
  startDate_lte: DateTime

  """All values greater than the given value."""
  startDate_gt: DateTime

  """All values greater than or equal the given value."""
  startDate_gte: DateTime
  live: Boolean

  """All values that are not equal to given value."""
  live_not: Boolean
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
  video: FileWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  vods_every: FileWhereInput
  vods_some: FileWhereInput
  vods_none: FileWhereInput
  classroom: ClassroomWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input ClassWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  name: String!
  secret: String
  contentType: String
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  name: String!
  secret: String
  contentType: String
  url: String!
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  name: String!
  secret: String
  contentType: String
  createdAt: DateTime!
  updatedAt: DateTime!
  url: String!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  name: String
  secret: String
  contentType: String
  url: String
}

input FileUpdateInput {
  name: String
  secret: String
  contentType: String
  url: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
}

input FileUpdateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  delete: Boolean
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  secret: String

  """All values that are not equal to given value."""
  secret_not: String

  """All values that are contained in given list."""
  secret_in: [String!]

  """All values that are not contained in given list."""
  secret_not_in: [String!]

  """All values less than the given value."""
  secret_lt: String

  """All values less than or equal the given value."""
  secret_lte: String

  """All values greater than the given value."""
  secret_gt: String

  """All values greater than or equal the given value."""
  secret_gte: String

  """All values containing the given string."""
  secret_contains: String

  """All values not containing the given string."""
  secret_not_contains: String

  """All values starting with the given string."""
  secret_starts_with: String

  """All values not starting with the given string."""
  secret_not_starts_with: String

  """All values ending with the given string."""
  secret_ends_with: String

  """All values not ending with the given string."""
  secret_not_ends_with: String
  contentType: String

  """All values that are not equal to given value."""
  contentType_not: String

  """All values that are contained in given list."""
  contentType_in: [String!]

  """All values that are not contained in given list."""
  contentType_not_in: [String!]

  """All values less than the given value."""
  contentType_lt: String

  """All values less than or equal the given value."""
  contentType_lte: String

  """All values greater than the given value."""
  contentType_gt: String

  """All values greater than or equal the given value."""
  contentType_gte: String

  """All values containing the given string."""
  contentType_contains: String

  """All values not containing the given string."""
  contentType_not_contains: String

  """All values starting with the given string."""
  contentType_starts_with: String

  """All values not starting with the given string."""
  contentType_not_starts_with: String

  """All values ending with the given string."""
  contentType_ends_with: String

  """All values not ending with the given string."""
  contentType_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
  secret: String
  url: String
}

type Follow implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  user_following(where: UserWhereInput): User!
  user_followed(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type FollowConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FollowEdge]!
  aggregate: AggregateFollow!
}

input FollowCreateInput {
  user_following: UserCreateOneWithoutFollowingInput!
  user_followed: UserCreateOneWithoutFollowersInput!
}

input FollowCreateManyWithoutUser_followedInput {
  create: [FollowCreateWithoutUser_followedInput!]
  connect: [FollowWhereUniqueInput!]
}

input FollowCreateManyWithoutUser_followingInput {
  create: [FollowCreateWithoutUser_followingInput!]
  connect: [FollowWhereUniqueInput!]
}

input FollowCreateWithoutUser_followedInput {
  user_following: UserCreateOneWithoutFollowingInput!
}

input FollowCreateWithoutUser_followingInput {
  user_followed: UserCreateOneWithoutFollowersInput!
}

"""An edge in a connection."""
type FollowEdge {
  """The item at the end of the edge."""
  node: Follow!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FollowOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FollowPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FollowSubscriptionPayload {
  mutation: MutationType!
  node: Follow
  updatedFields: [String!]
  previousValues: FollowPreviousValues
}

input FollowSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FollowWhereInput
}

input FollowUpdateInput {
  user_following: UserUpdateOneWithoutFollowingInput
  user_followed: UserUpdateOneWithoutFollowersInput
}

input FollowUpdateManyWithoutUser_followedInput {
  create: [FollowCreateWithoutUser_followedInput!]
  connect: [FollowWhereUniqueInput!]
  disconnect: [FollowWhereUniqueInput!]
  delete: [FollowWhereUniqueInput!]
  update: [FollowUpdateWithWhereUniqueWithoutUser_followedInput!]
  upsert: [FollowUpsertWithWhereUniqueWithoutUser_followedInput!]
}

input FollowUpdateManyWithoutUser_followingInput {
  create: [FollowCreateWithoutUser_followingInput!]
  connect: [FollowWhereUniqueInput!]
  disconnect: [FollowWhereUniqueInput!]
  delete: [FollowWhereUniqueInput!]
  update: [FollowUpdateWithWhereUniqueWithoutUser_followingInput!]
  upsert: [FollowUpsertWithWhereUniqueWithoutUser_followingInput!]
}

input FollowUpdateWithoutUser_followedDataInput {
  user_following: UserUpdateOneWithoutFollowingInput
}

input FollowUpdateWithoutUser_followingDataInput {
  user_followed: UserUpdateOneWithoutFollowersInput
}

input FollowUpdateWithWhereUniqueWithoutUser_followedInput {
  where: FollowWhereUniqueInput!
  data: FollowUpdateWithoutUser_followedDataInput!
}

input FollowUpdateWithWhereUniqueWithoutUser_followingInput {
  where: FollowWhereUniqueInput!
  data: FollowUpdateWithoutUser_followingDataInput!
}

input FollowUpsertWithWhereUniqueWithoutUser_followedInput {
  where: FollowWhereUniqueInput!
  update: FollowUpdateWithoutUser_followedDataInput!
  create: FollowCreateWithoutUser_followedInput!
}

input FollowUpsertWithWhereUniqueWithoutUser_followingInput {
  where: FollowWhereUniqueInput!
  update: FollowUpdateWithoutUser_followingDataInput!
  create: FollowCreateWithoutUser_followingInput!
}

input FollowWhereInput {
  """Logical AND on all given filters."""
  AND: [FollowWhereInput!]

  """Logical OR on all given filters."""
  OR: [FollowWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FollowWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  user_following: UserWhereInput
  user_followed: UserWhereInput
}

input FollowWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  sender(where: UserWhereInput): User!
  class(where: ClassWhereInput): Class!
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  text: String!
  sender: UserCreateOneWithoutMessagesInput!
  class: ClassCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutClassInput {
  create: [MessageCreateWithoutClassInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutClassInput {
  text: String!
  sender: UserCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutSenderInput {
  text: String!
  class: ClassCreateOneWithoutMessagesInput!
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  text: String
  sender: UserUpdateOneWithoutMessagesInput
  class: ClassUpdateOneWithoutMessagesInput
}

input MessageUpdateManyWithoutClassInput {
  create: [MessageCreateWithoutClassInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutClassInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutClassInput!]
}

input MessageUpdateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateWithoutClassDataInput {
  text: String
  sender: UserUpdateOneWithoutMessagesInput
}

input MessageUpdateWithoutSenderDataInput {
  text: String
  class: ClassUpdateOneWithoutMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutClassInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutClassDataInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutSenderDataInput!
}

input MessageUpsertWithWhereUniqueWithoutClassInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutClassDataInput!
  create: MessageCreateWithoutClassInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutSenderDataInput!
  create: MessageCreateWithoutSenderInput!
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  sender: UserWhereInput
  class: ClassWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createFollow(data: FollowCreateInput!): Follow!
  createClassroom(data: ClassroomCreateInput!): Classroom!
  createClass(data: ClassCreateInput!): Class!
  createFile(data: FileCreateInput!): File!
  createMessage(data: MessageCreateInput!): Message!
  createCharge(data: ChargeCreateInput!): Charge!
  createRefund(data: RefundCreateInput!): Refund!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFollow(data: FollowUpdateInput!, where: FollowWhereUniqueInput!): Follow
  updateClassroom(data: ClassroomUpdateInput!, where: ClassroomWhereUniqueInput!): Classroom
  updateClass(data: ClassUpdateInput!, where: ClassWhereUniqueInput!): Class
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateCharge(data: ChargeUpdateInput!, where: ChargeWhereUniqueInput!): Charge
  updateRefund(data: RefundUpdateInput!, where: RefundWhereUniqueInput!): Refund
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFollow(where: FollowWhereUniqueInput!): Follow
  deleteClassroom(where: ClassroomWhereUniqueInput!): Classroom
  deleteClass(where: ClassWhereUniqueInput!): Class
  deleteFile(where: FileWhereUniqueInput!): File
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteCharge(where: ChargeWhereUniqueInput!): Charge
  deleteRefund(where: RefundWhereUniqueInput!): Refund
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFollow(where: FollowWhereUniqueInput!, create: FollowCreateInput!, update: FollowUpdateInput!): Follow!
  upsertClassroom(where: ClassroomWhereUniqueInput!, create: ClassroomCreateInput!, update: ClassroomUpdateInput!): Classroom!
  upsertClass(where: ClassWhereUniqueInput!, create: ClassCreateInput!, update: ClassUpdateInput!): Class!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertCharge(where: ChargeWhereUniqueInput!, create: ChargeCreateInput!, update: ChargeUpdateInput!): Charge!
  upsertRefund(where: RefundWhereUniqueInput!, create: RefundCreateInput!, update: RefundUpdateInput!): Refund!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyFollows(data: FollowUpdateInput!, where: FollowWhereInput): BatchPayload!
  updateManyClassrooms(data: ClassroomUpdateInput!, where: ClassroomWhereInput): BatchPayload!
  updateManyClasses(data: ClassUpdateInput!, where: ClassWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput): BatchPayload!
  updateManyCharges(data: ChargeUpdateInput!, where: ChargeWhereInput): BatchPayload!
  updateManyRefunds(data: RefundUpdateInput!, where: RefundWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFollows(where: FollowWhereInput): BatchPayload!
  deleteManyClassrooms(where: ClassroomWhereInput): BatchPayload!
  deleteManyClasses(where: ClassWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyCharges(where: ChargeWhereInput): BatchPayload!
  deleteManyRefunds(where: RefundWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  follows(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follow]!
  classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom]!
  classes(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Class]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge]!
  refunds(where: RefundWhereInput, orderBy: RefundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Refund]!
  user(where: UserWhereUniqueInput!): User
  follow(where: FollowWhereUniqueInput!): Follow
  classroom(where: ClassroomWhereUniqueInput!): Classroom
  class(where: ClassWhereUniqueInput!): Class
  file(where: FileWhereUniqueInput!): File
  message(where: MessageWhereUniqueInput!): Message
  charge(where: ChargeWhereUniqueInput!): Charge
  refund(where: RefundWhereUniqueInput!): Refund
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  followsConnection(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FollowConnection!
  classroomsConnection(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassroomConnection!
  classesConnection(where: ClassWhereInput, orderBy: ClassOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ClassConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  chargesConnection(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChargeConnection!
  refundsConnection(where: RefundWhereInput, orderBy: RefundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RefundConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Refund implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  stripeId: String!
  amount: Float!
  charge(where: ChargeWhereInput): Charge!
  class(where: ClassWhereInput): Class!
  user(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type RefundConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RefundEdge]!
  aggregate: AggregateRefund!
}

input RefundCreateInput {
  stripeId: String!
  amount: Float!
  charge: ChargeCreateOneWithoutRefundInput!
  class: ClassCreateOneInput!
  user: UserCreateOneWithoutRefundsInput!
}

input RefundCreateManyWithoutUserInput {
  create: [RefundCreateWithoutUserInput!]
  connect: [RefundWhereUniqueInput!]
}

input RefundCreateOneWithoutChargeInput {
  create: RefundCreateWithoutChargeInput
  connect: RefundWhereUniqueInput
}

input RefundCreateWithoutChargeInput {
  stripeId: String!
  amount: Float!
  class: ClassCreateOneInput!
  user: UserCreateOneWithoutRefundsInput!
}

input RefundCreateWithoutUserInput {
  stripeId: String!
  amount: Float!
  charge: ChargeCreateOneWithoutRefundInput!
  class: ClassCreateOneInput!
}

"""An edge in a connection."""
type RefundEdge {
  """The item at the end of the edge."""
  node: Refund!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RefundOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  stripeId_ASC
  stripeId_DESC
  amount_ASC
  amount_DESC
}

type RefundPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  stripeId: String!
  amount: Float!
}

type RefundSubscriptionPayload {
  mutation: MutationType!
  node: Refund
  updatedFields: [String!]
  previousValues: RefundPreviousValues
}

input RefundSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RefundSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RefundSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RefundSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RefundWhereInput
}

input RefundUpdateInput {
  stripeId: String
  amount: Float
  charge: ChargeUpdateOneWithoutRefundInput
  class: ClassUpdateOneInput
  user: UserUpdateOneWithoutRefundsInput
}

input RefundUpdateManyWithoutUserInput {
  create: [RefundCreateWithoutUserInput!]
  connect: [RefundWhereUniqueInput!]
  disconnect: [RefundWhereUniqueInput!]
  delete: [RefundWhereUniqueInput!]
  update: [RefundUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [RefundUpsertWithWhereUniqueWithoutUserInput!]
}

input RefundUpdateOneWithoutChargeInput {
  create: RefundCreateWithoutChargeInput
  connect: RefundWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RefundUpdateWithoutChargeDataInput
  upsert: RefundUpsertWithoutChargeInput
}

input RefundUpdateWithoutChargeDataInput {
  stripeId: String
  amount: Float
  class: ClassUpdateOneInput
  user: UserUpdateOneWithoutRefundsInput
}

input RefundUpdateWithoutUserDataInput {
  stripeId: String
  amount: Float
  charge: ChargeUpdateOneWithoutRefundInput
  class: ClassUpdateOneInput
}

input RefundUpdateWithWhereUniqueWithoutUserInput {
  where: RefundWhereUniqueInput!
  data: RefundUpdateWithoutUserDataInput!
}

input RefundUpsertWithoutChargeInput {
  update: RefundUpdateWithoutChargeDataInput!
  create: RefundCreateWithoutChargeInput!
}

input RefundUpsertWithWhereUniqueWithoutUserInput {
  where: RefundWhereUniqueInput!
  update: RefundUpdateWithoutUserDataInput!
  create: RefundCreateWithoutUserInput!
}

input RefundWhereInput {
  """Logical AND on all given filters."""
  AND: [RefundWhereInput!]

  """Logical OR on all given filters."""
  OR: [RefundWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RefundWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  stripeId: String

  """All values that are not equal to given value."""
  stripeId_not: String

  """All values that are contained in given list."""
  stripeId_in: [String!]

  """All values that are not contained in given list."""
  stripeId_not_in: [String!]

  """All values less than the given value."""
  stripeId_lt: String

  """All values less than or equal the given value."""
  stripeId_lte: String

  """All values greater than the given value."""
  stripeId_gt: String

  """All values greater than or equal the given value."""
  stripeId_gte: String

  """All values containing the given string."""
  stripeId_contains: String

  """All values not containing the given string."""
  stripeId_not_contains: String

  """All values starting with the given string."""
  stripeId_starts_with: String

  """All values not starting with the given string."""
  stripeId_not_starts_with: String

  """All values ending with the given string."""
  stripeId_ends_with: String

  """All values not ending with the given string."""
  stripeId_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  charge: ChargeWhereInput
  class: ClassWhereInput
  user: UserWhereInput
}

input RefundWhereUniqueInput {
  id: ID
  stripeId: String
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  follow(where: FollowSubscriptionWhereInput): FollowSubscriptionPayload
  classroom(where: ClassroomSubscriptionWhereInput): ClassroomSubscriptionPayload
  class(where: ClassSubscriptionWhereInput): ClassSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  charge(where: ChargeSubscriptionWhereInput): ChargeSubscriptionPayload
  refund(where: RefundSubscriptionWhereInput): RefundSubscriptionPayload
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  picture(where: FileWhereInput): File!
  video(where: FileWhereInput): File
  stripeId: String
  stripeCustomerId: String
  taught_classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom!]
  studying_classrooms(where: ClassroomWhereInput, orderBy: ClassroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Classroom!]
  followers(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follow!]
  following(where: FollowWhereInput, orderBy: FollowOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Follow!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge!]
  refunds(where: RefundWhereInput, orderBy: RefundOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Refund!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  followers: FollowCreateManyWithoutUser_followedInput
  following: FollowCreateManyWithoutUser_followingInput
  messages: MessageCreateManyWithoutSenderInput
  charges: ChargeCreateManyWithoutUserInput
  refunds: RefundCreateManyWithoutUserInput
}

input UserCreateManyWithoutStudying_classroomsInput {
  create: [UserCreateWithoutStudying_classroomsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutChargesInput {
  create: UserCreateWithoutChargesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRefundsInput {
  create: UserCreateWithoutRefundsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutTaught_classroomsInput {
  create: UserCreateWithoutTaught_classroomsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChargesInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  followers: FollowCreateManyWithoutUser_followedInput
  following: FollowCreateManyWithoutUser_followingInput
  messages: MessageCreateManyWithoutSenderInput
  refunds: RefundCreateManyWithoutUserInput
}

input UserCreateWithoutFollowersInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  following: FollowCreateManyWithoutUser_followingInput
  messages: MessageCreateManyWithoutSenderInput
  charges: ChargeCreateManyWithoutUserInput
  refunds: RefundCreateManyWithoutUserInput
}

input UserCreateWithoutFollowingInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  followers: FollowCreateManyWithoutUser_followedInput
  messages: MessageCreateManyWithoutSenderInput
  charges: ChargeCreateManyWithoutUserInput
  refunds: RefundCreateManyWithoutUserInput
}

input UserCreateWithoutMessagesInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  followers: FollowCreateManyWithoutUser_followedInput
  following: FollowCreateManyWithoutUser_followingInput
  charges: ChargeCreateManyWithoutUserInput
  refunds: RefundCreateManyWithoutUserInput
}

input UserCreateWithoutRefundsInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  followers: FollowCreateManyWithoutUser_followedInput
  following: FollowCreateManyWithoutUser_followingInput
  messages: MessageCreateManyWithoutSenderInput
  charges: ChargeCreateManyWithoutUserInput
}

input UserCreateWithoutStudying_classroomsInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  taught_classrooms: ClassroomCreateManyWithoutTeacherInput
  followers: FollowCreateManyWithoutUser_followedInput
  following: FollowCreateManyWithoutUser_followingInput
  messages: MessageCreateManyWithoutSenderInput
  charges: ChargeCreateManyWithoutUserInput
  refunds: RefundCreateManyWithoutUserInput
}

input UserCreateWithoutTaught_classroomsInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileCreateOneInput!
  video: FileCreateOneInput
  studying_classrooms: ClassroomCreateManyWithoutStudentsInput
  followers: FollowCreateManyWithoutUser_followedInput
  following: FollowCreateManyWithoutUser_followingInput
  messages: MessageCreateManyWithoutSenderInput
  charges: ChargeCreateManyWithoutUserInput
  refunds: RefundCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  auth0Id_ASC
  auth0Id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  email_verified_ASC
  email_verified_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  stripeId_ASC
  stripeId_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  username: String!
  email: String!
  email_verified: String
  name: String
  gender: Gender!
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  followers: FollowUpdateManyWithoutUser_followedInput
  following: FollowUpdateManyWithoutUser_followingInput
  messages: MessageUpdateManyWithoutSenderInput
  charges: ChargeUpdateManyWithoutUserInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateManyWithoutStudying_classroomsInput {
  create: [UserCreateWithoutStudying_classroomsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutStudying_classroomsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutStudying_classroomsInput!]
}

input UserUpdateOneWithoutChargesInput {
  create: UserCreateWithoutChargesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutChargesDataInput
  upsert: UserUpsertWithoutChargesInput
}

input UserUpdateOneWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutFollowersDataInput
  upsert: UserUpsertWithoutFollowersInput
}

input UserUpdateOneWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutFollowingDataInput
  upsert: UserUpsertWithoutFollowingInput
}

input UserUpdateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneWithoutRefundsInput {
  create: UserCreateWithoutRefundsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutRefundsDataInput
  upsert: UserUpsertWithoutRefundsInput
}

input UserUpdateOneWithoutTaught_classroomsInput {
  create: UserCreateWithoutTaught_classroomsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTaught_classroomsDataInput
  upsert: UserUpsertWithoutTaught_classroomsInput
}

input UserUpdateWithoutChargesDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  followers: FollowUpdateManyWithoutUser_followedInput
  following: FollowUpdateManyWithoutUser_followingInput
  messages: MessageUpdateManyWithoutSenderInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowersDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  following: FollowUpdateManyWithoutUser_followingInput
  messages: MessageUpdateManyWithoutSenderInput
  charges: ChargeUpdateManyWithoutUserInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateWithoutFollowingDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  followers: FollowUpdateManyWithoutUser_followedInput
  messages: MessageUpdateManyWithoutSenderInput
  charges: ChargeUpdateManyWithoutUserInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateWithoutMessagesDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  followers: FollowUpdateManyWithoutUser_followedInput
  following: FollowUpdateManyWithoutUser_followingInput
  charges: ChargeUpdateManyWithoutUserInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateWithoutRefundsDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  followers: FollowUpdateManyWithoutUser_followedInput
  following: FollowUpdateManyWithoutUser_followingInput
  messages: MessageUpdateManyWithoutSenderInput
  charges: ChargeUpdateManyWithoutUserInput
}

input UserUpdateWithoutStudying_classroomsDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  taught_classrooms: ClassroomUpdateManyWithoutTeacherInput
  followers: FollowUpdateManyWithoutUser_followedInput
  following: FollowUpdateManyWithoutUser_followingInput
  messages: MessageUpdateManyWithoutSenderInput
  charges: ChargeUpdateManyWithoutUserInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateWithoutTaught_classroomsDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: String
  name: String
  gender: Gender
  description: String
  url: String
  stripeId: String
  stripeCustomerId: String
  picture: FileUpdateOneInput
  video: FileUpdateOneInput
  studying_classrooms: ClassroomUpdateManyWithoutStudentsInput
  followers: FollowUpdateManyWithoutUser_followedInput
  following: FollowUpdateManyWithoutUser_followingInput
  messages: MessageUpdateManyWithoutSenderInput
  charges: ChargeUpdateManyWithoutUserInput
  refunds: RefundUpdateManyWithoutUserInput
}

input UserUpdateWithWhereUniqueWithoutStudying_classroomsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStudying_classroomsDataInput!
}

input UserUpsertWithoutChargesInput {
  update: UserUpdateWithoutChargesDataInput!
  create: UserCreateWithoutChargesInput!
}

input UserUpsertWithoutFollowersInput {
  update: UserUpdateWithoutFollowersDataInput!
  create: UserCreateWithoutFollowersInput!
}

input UserUpsertWithoutFollowingInput {
  update: UserUpdateWithoutFollowingDataInput!
  create: UserCreateWithoutFollowingInput!
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithoutRefundsInput {
  update: UserUpdateWithoutRefundsDataInput!
  create: UserCreateWithoutRefundsInput!
}

input UserUpsertWithoutTaught_classroomsInput {
  update: UserUpdateWithoutTaught_classroomsDataInput!
  create: UserCreateWithoutTaught_classroomsInput!
}

input UserUpsertWithWhereUniqueWithoutStudying_classroomsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStudying_classroomsDataInput!
  create: UserCreateWithoutStudying_classroomsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  auth0Id: String

  """All values that are not equal to given value."""
  auth0Id_not: String

  """All values that are contained in given list."""
  auth0Id_in: [String!]

  """All values that are not contained in given list."""
  auth0Id_not_in: [String!]

  """All values less than the given value."""
  auth0Id_lt: String

  """All values less than or equal the given value."""
  auth0Id_lte: String

  """All values greater than the given value."""
  auth0Id_gt: String

  """All values greater than or equal the given value."""
  auth0Id_gte: String

  """All values containing the given string."""
  auth0Id_contains: String

  """All values not containing the given string."""
  auth0Id_not_contains: String

  """All values starting with the given string."""
  auth0Id_starts_with: String

  """All values not starting with the given string."""
  auth0Id_not_starts_with: String

  """All values ending with the given string."""
  auth0Id_ends_with: String

  """All values not ending with the given string."""
  auth0Id_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  email_verified: String

  """All values that are not equal to given value."""
  email_verified_not: String

  """All values that are contained in given list."""
  email_verified_in: [String!]

  """All values that are not contained in given list."""
  email_verified_not_in: [String!]

  """All values less than the given value."""
  email_verified_lt: String

  """All values less than or equal the given value."""
  email_verified_lte: String

  """All values greater than the given value."""
  email_verified_gt: String

  """All values greater than or equal the given value."""
  email_verified_gte: String

  """All values containing the given string."""
  email_verified_contains: String

  """All values not containing the given string."""
  email_verified_not_contains: String

  """All values starting with the given string."""
  email_verified_starts_with: String

  """All values not starting with the given string."""
  email_verified_not_starts_with: String

  """All values ending with the given string."""
  email_verified_ends_with: String

  """All values not ending with the given string."""
  email_verified_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  stripeId: String

  """All values that are not equal to given value."""
  stripeId_not: String

  """All values that are contained in given list."""
  stripeId_in: [String!]

  """All values that are not contained in given list."""
  stripeId_not_in: [String!]

  """All values less than the given value."""
  stripeId_lt: String

  """All values less than or equal the given value."""
  stripeId_lte: String

  """All values greater than the given value."""
  stripeId_gt: String

  """All values greater than or equal the given value."""
  stripeId_gte: String

  """All values containing the given string."""
  stripeId_contains: String

  """All values not containing the given string."""
  stripeId_not_contains: String

  """All values starting with the given string."""
  stripeId_starts_with: String

  """All values not starting with the given string."""
  stripeId_not_starts_with: String

  """All values ending with the given string."""
  stripeId_ends_with: String

  """All values not ending with the given string."""
  stripeId_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  picture: FileWhereInput
  video: FileWhereInput
  taught_classrooms_every: ClassroomWhereInput
  taught_classrooms_some: ClassroomWhereInput
  taught_classrooms_none: ClassroomWhereInput
  studying_classrooms_every: ClassroomWhereInput
  studying_classrooms_some: ClassroomWhereInput
  studying_classrooms_none: ClassroomWhereInput
  followers_every: FollowWhereInput
  followers_some: FollowWhereInput
  followers_none: FollowWhereInput
  following_every: FollowWhereInput
  following_some: FollowWhereInput
  following_none: FollowWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  charges_every: ChargeWhereInput
  charges_some: ChargeWhereInput
  charges_none: ChargeWhereInput
  refunds_every: RefundWhereInput
  refunds_some: RefundWhereInput
  refunds_none: RefundWhereInput
}

input UserWhereUniqueInput {
  id: ID
  auth0Id: String
  username: String
  email: String
  stripeId: String
  stripeCustomerId: String
}
