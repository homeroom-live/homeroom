# source: https://eu1.prisma.sh/matic-zavadlal-03c51f/homeroom-refactor/development
# timestamp: Fri Jul 20 2018 13:07:13 GMT+0200 (CEST)

type AggregateCourse {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLesson {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateTeacherSubscription {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Course implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson!]
  archived: Boolean!
}

"""A connection to a list of items."""
type CourseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreateInput {
  name: String!
  archived: Boolean
  lessons: LessonCreateManyWithoutCourseInput
}

input CourseCreateOneWithoutLessonsInput {
  create: CourseCreateWithoutLessonsInput
  connect: CourseWhereUniqueInput
}

input CourseCreateWithoutLessonsInput {
  name: String!
  archived: Boolean
}

"""An edge in a connection."""
type CourseEdge {
  """The item at the end of the edge."""
  node: Course!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  archived_ASC
  archived_DESC
}

type CoursePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  archived: Boolean!
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
}

input CourseUpdateInput {
  name: String
  archived: Boolean
  lessons: LessonUpdateManyWithoutCourseInput
}

input CourseUpdateOneWithoutLessonsInput {
  create: CourseCreateWithoutLessonsInput
  connect: CourseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CourseUpdateWithoutLessonsDataInput
  upsert: CourseUpsertWithoutLessonsInput
}

input CourseUpdateWithoutLessonsDataInput {
  name: String
  archived: Boolean
}

input CourseUpsertWithoutLessonsInput {
  update: CourseUpdateWithoutLessonsDataInput!
  create: CourseCreateWithoutLessonsInput!
}

input CourseWhereInput {
  """Logical AND on all given filters."""
  AND: [CourseWhereInput!]

  """Logical OR on all given filters."""
  OR: [CourseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CourseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  archived: Boolean

  """All values that are not equal to given value."""
  archived_not: Boolean
  lessons_every: LessonWhereInput
  lessons_some: LessonWhereInput
  lessons_none: LessonWhereInput
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type File implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  secret: String!
  contentType: String!
  lesson(where: LessonWhereInput): Lesson
  archived: Boolean!
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  name: String!
  secret: String!
  contentType: String!
  archived: Boolean
  lesson: LessonCreateOneWithoutFilesInput
}

input FileCreateManyWithoutLessonInput {
  create: [FileCreateWithoutLessonInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutLessonInput {
  name: String!
  secret: String!
  contentType: String!
  archived: Boolean
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  archived_ASC
  archived_DESC
}

type FilePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  secret: String!
  contentType: String!
  archived: Boolean!
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  name: String
  secret: String
  contentType: String
  archived: Boolean
  lesson: LessonUpdateOneWithoutFilesInput
}

input FileUpdateInput {
  name: String
  secret: String
  contentType: String
  archived: Boolean
  lesson: LessonUpdateOneWithoutFilesInput
}

input FileUpdateManyWithoutLessonInput {
  create: [FileCreateWithoutLessonInput!]
  connect: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutLessonInput!]
}

input FileUpdateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
}

input FileUpdateWithoutLessonDataInput {
  name: String
  secret: String
  contentType: String
  archived: Boolean
}

input FileUpdateWithWhereUniqueWithoutLessonInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutLessonDataInput!
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueWithoutLessonInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutLessonDataInput!
  create: FileCreateWithoutLessonInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  secret: String

  """All values that are not equal to given value."""
  secret_not: String

  """All values that are contained in given list."""
  secret_in: [String!]

  """All values that are not contained in given list."""
  secret_not_in: [String!]

  """All values less than the given value."""
  secret_lt: String

  """All values less than or equal the given value."""
  secret_lte: String

  """All values greater than the given value."""
  secret_gt: String

  """All values greater than or equal the given value."""
  secret_gte: String

  """All values containing the given string."""
  secret_contains: String

  """All values not containing the given string."""
  secret_not_contains: String

  """All values starting with the given string."""
  secret_starts_with: String

  """All values not starting with the given string."""
  secret_not_starts_with: String

  """All values ending with the given string."""
  secret_ends_with: String

  """All values not ending with the given string."""
  secret_not_ends_with: String
  contentType: String

  """All values that are not equal to given value."""
  contentType_not: String

  """All values that are contained in given list."""
  contentType_in: [String!]

  """All values that are not contained in given list."""
  contentType_not_in: [String!]

  """All values less than the given value."""
  contentType_lt: String

  """All values less than or equal the given value."""
  contentType_lte: String

  """All values greater than the given value."""
  contentType_gt: String

  """All values greater than or equal the given value."""
  contentType_gte: String

  """All values containing the given string."""
  contentType_contains: String

  """All values not containing the given string."""
  contentType_not_contains: String

  """All values starting with the given string."""
  contentType_starts_with: String

  """All values not starting with the given string."""
  contentType_not_starts_with: String

  """All values ending with the given string."""
  contentType_ends_with: String

  """All values not ending with the given string."""
  contentType_not_ends_with: String
  archived: Boolean

  """All values that are not equal to given value."""
  archived_not: Boolean
  lesson: LessonWhereInput
  _MagicalBackRelation_UserPicture_every: UserWhereInput
  _MagicalBackRelation_UserPicture_some: UserWhereInput
  _MagicalBackRelation_UserPicture_none: UserWhereInput
}

input FileWhereUniqueInput {
  id: ID
  secret: String
}

enum Gender {
  MALE
  FEMALE
}

type Lesson implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime!
  premium: Boolean!
  course(where: CourseWhereInput): Course
  streamKey: String!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  archived: Boolean!
}

"""A connection to a list of items."""
type LessonConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LessonEdge]!
  aggregate: AggregateLesson!
}

input LessonCreateInput {
  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime!
  premium: Boolean
  streamKey: String!
  archived: Boolean
  course: CourseCreateOneWithoutLessonsInput
  messages: MessageCreateManyWithoutLessonInput
  files: FileCreateManyWithoutLessonInput
}

input LessonCreateManyWithoutCourseInput {
  create: [LessonCreateWithoutCourseInput!]
  connect: [LessonWhereUniqueInput!]
}

input LessonCreateOneInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutFilesInput {
  create: LessonCreateWithoutFilesInput
  connect: LessonWhereUniqueInput
}

input LessonCreateOneWithoutMessagesInput {
  create: LessonCreateWithoutMessagesInput
  connect: LessonWhereUniqueInput
}

input LessonCreateWithoutCourseInput {
  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime!
  premium: Boolean
  streamKey: String!
  archived: Boolean
  messages: MessageCreateManyWithoutLessonInput
  files: FileCreateManyWithoutLessonInput
}

input LessonCreateWithoutFilesInput {
  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime!
  premium: Boolean
  streamKey: String!
  archived: Boolean
  course: CourseCreateOneWithoutLessonsInput
  messages: MessageCreateManyWithoutLessonInput
}

input LessonCreateWithoutMessagesInput {
  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime!
  premium: Boolean
  streamKey: String!
  archived: Boolean
  course: CourseCreateOneWithoutLessonsInput
  files: FileCreateManyWithoutLessonInput
}

"""An edge in a connection."""
type LessonEdge {
  """The item at the end of the edge."""
  node: Lesson!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LessonOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  thumbnail_ASC
  thumbnail_DESC
  schedule_ASC
  schedule_DESC
  premium_ASC
  premium_DESC
  streamKey_ASC
  streamKey_DESC
  archived_ASC
  archived_DESC
}

type LessonPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  thumbnail: String!
  schedule: DateTime!
  premium: Boolean!
  streamKey: String!
  archived: Boolean!
}

type LessonSubscriptionPayload {
  mutation: MutationType!
  node: Lesson
  updatedFields: [String!]
  previousValues: LessonPreviousValues
}

input LessonSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LessonWhereInput
}

input LessonUpdateDataInput {
  name: String
  description: String
  thumbnail: String
  schedule: DateTime
  premium: Boolean
  streamKey: String
  archived: Boolean
  course: CourseUpdateOneWithoutLessonsInput
  messages: MessageUpdateManyWithoutLessonInput
  files: FileUpdateManyWithoutLessonInput
}

input LessonUpdateInput {
  name: String
  description: String
  thumbnail: String
  schedule: DateTime
  premium: Boolean
  streamKey: String
  archived: Boolean
  course: CourseUpdateOneWithoutLessonsInput
  messages: MessageUpdateManyWithoutLessonInput
  files: FileUpdateManyWithoutLessonInput
}

input LessonUpdateManyWithoutCourseInput {
  create: [LessonCreateWithoutCourseInput!]
  connect: [LessonWhereUniqueInput!]
  disconnect: [LessonWhereUniqueInput!]
  delete: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutCourseInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutCourseInput!]
}

input LessonUpdateOneInput {
  create: LessonCreateInput
  connect: LessonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LessonUpdateDataInput
  upsert: LessonUpsertNestedInput
}

input LessonUpdateOneWithoutFilesInput {
  create: LessonCreateWithoutFilesInput
  connect: LessonWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: LessonUpdateWithoutFilesDataInput
  upsert: LessonUpsertWithoutFilesInput
}

input LessonUpdateOneWithoutMessagesInput {
  create: LessonCreateWithoutMessagesInput
  connect: LessonWhereUniqueInput
  delete: Boolean
  update: LessonUpdateWithoutMessagesDataInput
  upsert: LessonUpsertWithoutMessagesInput
}

input LessonUpdateWithoutCourseDataInput {
  name: String
  description: String
  thumbnail: String
  schedule: DateTime
  premium: Boolean
  streamKey: String
  archived: Boolean
  messages: MessageUpdateManyWithoutLessonInput
  files: FileUpdateManyWithoutLessonInput
}

input LessonUpdateWithoutFilesDataInput {
  name: String
  description: String
  thumbnail: String
  schedule: DateTime
  premium: Boolean
  streamKey: String
  archived: Boolean
  course: CourseUpdateOneWithoutLessonsInput
  messages: MessageUpdateManyWithoutLessonInput
}

input LessonUpdateWithoutMessagesDataInput {
  name: String
  description: String
  thumbnail: String
  schedule: DateTime
  premium: Boolean
  streamKey: String
  archived: Boolean
  course: CourseUpdateOneWithoutLessonsInput
  files: FileUpdateManyWithoutLessonInput
}

input LessonUpdateWithWhereUniqueWithoutCourseInput {
  where: LessonWhereUniqueInput!
  data: LessonUpdateWithoutCourseDataInput!
}

input LessonUpsertNestedInput {
  update: LessonUpdateDataInput!
  create: LessonCreateInput!
}

input LessonUpsertWithoutFilesInput {
  update: LessonUpdateWithoutFilesDataInput!
  create: LessonCreateWithoutFilesInput!
}

input LessonUpsertWithoutMessagesInput {
  update: LessonUpdateWithoutMessagesDataInput!
  create: LessonCreateWithoutMessagesInput!
}

input LessonUpsertWithWhereUniqueWithoutCourseInput {
  where: LessonWhereUniqueInput!
  update: LessonUpdateWithoutCourseDataInput!
  create: LessonCreateWithoutCourseInput!
}

input LessonWhereInput {
  """Logical AND on all given filters."""
  AND: [LessonWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessonWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessonWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  thumbnail: String

  """All values that are not equal to given value."""
  thumbnail_not: String

  """All values that are contained in given list."""
  thumbnail_in: [String!]

  """All values that are not contained in given list."""
  thumbnail_not_in: [String!]

  """All values less than the given value."""
  thumbnail_lt: String

  """All values less than or equal the given value."""
  thumbnail_lte: String

  """All values greater than the given value."""
  thumbnail_gt: String

  """All values greater than or equal the given value."""
  thumbnail_gte: String

  """All values containing the given string."""
  thumbnail_contains: String

  """All values not containing the given string."""
  thumbnail_not_contains: String

  """All values starting with the given string."""
  thumbnail_starts_with: String

  """All values not starting with the given string."""
  thumbnail_not_starts_with: String

  """All values ending with the given string."""
  thumbnail_ends_with: String

  """All values not ending with the given string."""
  thumbnail_not_ends_with: String
  schedule: DateTime

  """All values that are not equal to given value."""
  schedule_not: DateTime

  """All values that are contained in given list."""
  schedule_in: [DateTime!]

  """All values that are not contained in given list."""
  schedule_not_in: [DateTime!]

  """All values less than the given value."""
  schedule_lt: DateTime

  """All values less than or equal the given value."""
  schedule_lte: DateTime

  """All values greater than the given value."""
  schedule_gt: DateTime

  """All values greater than or equal the given value."""
  schedule_gte: DateTime
  premium: Boolean

  """All values that are not equal to given value."""
  premium_not: Boolean
  streamKey: String

  """All values that are not equal to given value."""
  streamKey_not: String

  """All values that are contained in given list."""
  streamKey_in: [String!]

  """All values that are not contained in given list."""
  streamKey_not_in: [String!]

  """All values less than the given value."""
  streamKey_lt: String

  """All values less than or equal the given value."""
  streamKey_lte: String

  """All values greater than the given value."""
  streamKey_gt: String

  """All values greater than or equal the given value."""
  streamKey_gte: String

  """All values containing the given string."""
  streamKey_contains: String

  """All values not containing the given string."""
  streamKey_not_contains: String

  """All values starting with the given string."""
  streamKey_starts_with: String

  """All values not starting with the given string."""
  streamKey_not_starts_with: String

  """All values ending with the given string."""
  streamKey_ends_with: String

  """All values not ending with the given string."""
  streamKey_not_ends_with: String
  archived: Boolean

  """All values that are not equal to given value."""
  archived_not: Boolean
  course: CourseWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  _MagicalBackRelation_LessonToUser_every: UserWhereInput
  _MagicalBackRelation_LessonToUser_some: UserWhereInput
  _MagicalBackRelation_LessonToUser_none: UserWhereInput
}

input LessonWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  sender(where: UserWhereInput): User!
  lesson(where: LessonWhereInput): Lesson!
  archived: Boolean!
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  text: String!
  archived: Boolean
  sender: UserCreateOneWithoutMessagesInput!
  lesson: LessonCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutLessonInput {
  create: [MessageCreateWithoutLessonInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutLessonInput {
  text: String!
  archived: Boolean
  sender: UserCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutSenderInput {
  text: String!
  archived: Boolean
  lesson: LessonCreateOneWithoutMessagesInput!
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  text_ASC
  text_DESC
  archived_ASC
  archived_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  text: String!
  archived: Boolean!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  text: String
  archived: Boolean
  sender: UserUpdateOneWithoutMessagesInput
  lesson: LessonUpdateOneWithoutMessagesInput
}

input MessageUpdateManyWithoutLessonInput {
  create: [MessageCreateWithoutLessonInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutLessonInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutLessonInput!]
}

input MessageUpdateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateWithoutLessonDataInput {
  text: String
  archived: Boolean
  sender: UserUpdateOneWithoutMessagesInput
}

input MessageUpdateWithoutSenderDataInput {
  text: String
  archived: Boolean
  lesson: LessonUpdateOneWithoutMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutLessonInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutLessonDataInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutSenderDataInput!
}

input MessageUpsertWithWhereUniqueWithoutLessonInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutLessonDataInput!
  create: MessageCreateWithoutLessonInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutSenderDataInput!
  create: MessageCreateWithoutSenderInput!
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  archived: Boolean

  """All values that are not equal to given value."""
  archived_not: Boolean
  sender: UserWhereInput
  lesson: LessonWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTeacherSubscription(data: TeacherSubscriptionCreateInput!): TeacherSubscription!
  createCourse(data: CourseCreateInput!): Course!
  createMessage(data: MessageCreateInput!): Message!
  createLesson(data: LessonCreateInput!): Lesson!
  createFile(data: FileCreateInput!): File!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTeacherSubscription(data: TeacherSubscriptionUpdateInput!, where: TeacherSubscriptionWhereUniqueInput!): TeacherSubscription
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTeacherSubscription(where: TeacherSubscriptionWhereUniqueInput!): TeacherSubscription
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteLesson(where: LessonWhereUniqueInput!): Lesson
  deleteFile(where: FileWhereUniqueInput!): File
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTeacherSubscription(where: TeacherSubscriptionWhereUniqueInput!, create: TeacherSubscriptionCreateInput!, update: TeacherSubscriptionUpdateInput!): TeacherSubscription!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertLesson(where: LessonWhereUniqueInput!, create: LessonCreateInput!, update: LessonUpdateInput!): Lesson!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTeacherSubscriptions(data: TeacherSubscriptionUpdateInput!, where: TeacherSubscriptionWhereInput): BatchPayload!
  updateManyCourses(data: CourseUpdateInput!, where: CourseWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput): BatchPayload!
  updateManyLessons(data: LessonUpdateInput!, where: LessonWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateInput!, where: FileWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTeacherSubscriptions(where: TeacherSubscriptionWhereInput): BatchPayload!
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyLessons(where: LessonWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  teacherSubscriptions(where: TeacherSubscriptionWhereInput, orderBy: TeacherSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeacherSubscription]!
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  lessons(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lesson]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  user(where: UserWhereUniqueInput!): User
  teacherSubscription(where: TeacherSubscriptionWhereUniqueInput!): TeacherSubscription
  course(where: CourseWhereUniqueInput!): Course
  message(where: MessageWhereUniqueInput!): Message
  lesson(where: LessonWhereUniqueInput!): Lesson
  file(where: FileWhereUniqueInput!): File
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  teacherSubscriptionsConnection(where: TeacherSubscriptionWhereInput, orderBy: TeacherSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeacherSubscriptionConnection!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  lessonsConnection(where: LessonWhereInput, orderBy: LessonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessonConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  teacherSubscription(where: TeacherSubscriptionSubscriptionWhereInput): TeacherSubscriptionSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  lesson(where: LessonSubscriptionWhereInput): LessonSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
}

type TeacherSubscription implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  teacher(where: UserWhereInput): User!
  subscriber(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type TeacherSubscriptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TeacherSubscriptionEdge]!
  aggregate: AggregateTeacherSubscription!
}

input TeacherSubscriptionCreateInput {
  teacher: UserCreateOneWithoutSubscriptionsInput!
  subscriber: UserCreateOneWithoutSubscribersInput!
}

input TeacherSubscriptionCreateManyWithoutSubscriberInput {
  create: [TeacherSubscriptionCreateWithoutSubscriberInput!]
  connect: [TeacherSubscriptionWhereUniqueInput!]
}

input TeacherSubscriptionCreateManyWithoutTeacherInput {
  create: [TeacherSubscriptionCreateWithoutTeacherInput!]
  connect: [TeacherSubscriptionWhereUniqueInput!]
}

input TeacherSubscriptionCreateWithoutSubscriberInput {
  teacher: UserCreateOneWithoutSubscriptionsInput!
}

input TeacherSubscriptionCreateWithoutTeacherInput {
  subscriber: UserCreateOneWithoutSubscribersInput!
}

"""An edge in a connection."""
type TeacherSubscriptionEdge {
  """The item at the end of the edge."""
  node: TeacherSubscription!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TeacherSubscriptionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeacherSubscriptionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeacherSubscriptionSubscriptionPayload {
  mutation: MutationType!
  node: TeacherSubscription
  updatedFields: [String!]
  previousValues: TeacherSubscriptionPreviousValues
}

input TeacherSubscriptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeacherSubscriptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeacherSubscriptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeacherSubscriptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TeacherSubscriptionWhereInput
}

input TeacherSubscriptionUpdateInput {
  teacher: UserUpdateOneWithoutSubscriptionsInput
  subscriber: UserUpdateOneWithoutSubscribersInput
}

input TeacherSubscriptionUpdateManyWithoutSubscriberInput {
  create: [TeacherSubscriptionCreateWithoutSubscriberInput!]
  connect: [TeacherSubscriptionWhereUniqueInput!]
  disconnect: [TeacherSubscriptionWhereUniqueInput!]
  delete: [TeacherSubscriptionWhereUniqueInput!]
  update: [TeacherSubscriptionUpdateWithWhereUniqueWithoutSubscriberInput!]
  upsert: [TeacherSubscriptionUpsertWithWhereUniqueWithoutSubscriberInput!]
}

input TeacherSubscriptionUpdateManyWithoutTeacherInput {
  create: [TeacherSubscriptionCreateWithoutTeacherInput!]
  connect: [TeacherSubscriptionWhereUniqueInput!]
  disconnect: [TeacherSubscriptionWhereUniqueInput!]
  delete: [TeacherSubscriptionWhereUniqueInput!]
  update: [TeacherSubscriptionUpdateWithWhereUniqueWithoutTeacherInput!]
  upsert: [TeacherSubscriptionUpsertWithWhereUniqueWithoutTeacherInput!]
}

input TeacherSubscriptionUpdateWithoutSubscriberDataInput {
  teacher: UserUpdateOneWithoutSubscriptionsInput
}

input TeacherSubscriptionUpdateWithoutTeacherDataInput {
  subscriber: UserUpdateOneWithoutSubscribersInput
}

input TeacherSubscriptionUpdateWithWhereUniqueWithoutSubscriberInput {
  where: TeacherSubscriptionWhereUniqueInput!
  data: TeacherSubscriptionUpdateWithoutSubscriberDataInput!
}

input TeacherSubscriptionUpdateWithWhereUniqueWithoutTeacherInput {
  where: TeacherSubscriptionWhereUniqueInput!
  data: TeacherSubscriptionUpdateWithoutTeacherDataInput!
}

input TeacherSubscriptionUpsertWithWhereUniqueWithoutSubscriberInput {
  where: TeacherSubscriptionWhereUniqueInput!
  update: TeacherSubscriptionUpdateWithoutSubscriberDataInput!
  create: TeacherSubscriptionCreateWithoutSubscriberInput!
}

input TeacherSubscriptionUpsertWithWhereUniqueWithoutTeacherInput {
  where: TeacherSubscriptionWhereUniqueInput!
  update: TeacherSubscriptionUpdateWithoutTeacherDataInput!
  create: TeacherSubscriptionCreateWithoutTeacherInput!
}

input TeacherSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TeacherSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TeacherSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TeacherSubscriptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  teacher: UserWhereInput
  subscriber: UserWhereInput
}

input TeacherSubscriptionWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  username: String!
  email: String!
  email_verified: Boolean!
  name: String
  gender: Gender!
  bio: String!
  picture(where: FileWhereInput): File
  price: Float
  live(where: LessonWhereInput): Lesson
  subscriptions(where: TeacherSubscriptionWhereInput, orderBy: TeacherSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeacherSubscription!]
  subscribers(where: TeacherSubscriptionWhereInput, orderBy: TeacherSubscriptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeacherSubscription!]
  stripeId: String
  stripeCustomerId: String
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  receiveNotifications: Boolean!
  archived: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: Boolean
  name: String
  gender: Gender!
  bio: String!
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileCreateOneInput
  live: LessonCreateOneInput
  subscriptions: TeacherSubscriptionCreateManyWithoutTeacherInput
  subscribers: TeacherSubscriptionCreateManyWithoutSubscriberInput
  messages: MessageCreateManyWithoutSenderInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubscribersInput {
  create: UserCreateWithoutSubscribersInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSubscriptionsInput {
  create: UserCreateWithoutSubscriptionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMessagesInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: Boolean
  name: String
  gender: Gender!
  bio: String!
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileCreateOneInput
  live: LessonCreateOneInput
  subscriptions: TeacherSubscriptionCreateManyWithoutTeacherInput
  subscribers: TeacherSubscriptionCreateManyWithoutSubscriberInput
}

input UserCreateWithoutSubscribersInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: Boolean
  name: String
  gender: Gender!
  bio: String!
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileCreateOneInput
  live: LessonCreateOneInput
  subscriptions: TeacherSubscriptionCreateManyWithoutTeacherInput
  messages: MessageCreateManyWithoutSenderInput
}

input UserCreateWithoutSubscriptionsInput {
  auth0Id: String!
  username: String!
  email: String!
  email_verified: Boolean
  name: String
  gender: Gender!
  bio: String!
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileCreateOneInput
  live: LessonCreateOneInput
  subscribers: TeacherSubscriptionCreateManyWithoutSubscriberInput
  messages: MessageCreateManyWithoutSenderInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  auth0Id_ASC
  auth0Id_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  email_verified_ASC
  email_verified_DESC
  name_ASC
  name_DESC
  gender_ASC
  gender_DESC
  bio_ASC
  bio_DESC
  price_ASC
  price_DESC
  stripeId_ASC
  stripeId_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  receiveNotifications_ASC
  receiveNotifications_DESC
  archived_ASC
  archived_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  username: String!
  email: String!
  email_verified: Boolean!
  name: String
  gender: Gender!
  bio: String!
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean!
  archived: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  auth0Id: String
  username: String
  email: String
  email_verified: Boolean
  name: String
  gender: Gender
  bio: String
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileUpdateOneInput
  live: LessonUpdateOneInput
  subscriptions: TeacherSubscriptionUpdateManyWithoutTeacherInput
  subscribers: TeacherSubscriptionUpdateManyWithoutSubscriberInput
  messages: MessageUpdateManyWithoutSenderInput
}

input UserUpdateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
}

input UserUpdateOneWithoutSubscribersInput {
  create: UserCreateWithoutSubscribersInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutSubscribersDataInput
  upsert: UserUpsertWithoutSubscribersInput
}

input UserUpdateOneWithoutSubscriptionsInput {
  create: UserCreateWithoutSubscriptionsInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutSubscriptionsDataInput
  upsert: UserUpsertWithoutSubscriptionsInput
}

input UserUpdateWithoutMessagesDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: Boolean
  name: String
  gender: Gender
  bio: String
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileUpdateOneInput
  live: LessonUpdateOneInput
  subscriptions: TeacherSubscriptionUpdateManyWithoutTeacherInput
  subscribers: TeacherSubscriptionUpdateManyWithoutSubscriberInput
}

input UserUpdateWithoutSubscribersDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: Boolean
  name: String
  gender: Gender
  bio: String
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileUpdateOneInput
  live: LessonUpdateOneInput
  subscriptions: TeacherSubscriptionUpdateManyWithoutTeacherInput
  messages: MessageUpdateManyWithoutSenderInput
}

input UserUpdateWithoutSubscriptionsDataInput {
  auth0Id: String
  username: String
  email: String
  email_verified: Boolean
  name: String
  gender: Gender
  bio: String
  price: Float
  stripeId: String
  stripeCustomerId: String
  receiveNotifications: Boolean
  archived: Boolean
  picture: FileUpdateOneInput
  live: LessonUpdateOneInput
  subscribers: TeacherSubscriptionUpdateManyWithoutSubscriberInput
  messages: MessageUpdateManyWithoutSenderInput
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithoutSubscribersInput {
  update: UserUpdateWithoutSubscribersDataInput!
  create: UserCreateWithoutSubscribersInput!
}

input UserUpsertWithoutSubscriptionsInput {
  update: UserUpdateWithoutSubscriptionsDataInput!
  create: UserCreateWithoutSubscriptionsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  auth0Id: String

  """All values that are not equal to given value."""
  auth0Id_not: String

  """All values that are contained in given list."""
  auth0Id_in: [String!]

  """All values that are not contained in given list."""
  auth0Id_not_in: [String!]

  """All values less than the given value."""
  auth0Id_lt: String

  """All values less than or equal the given value."""
  auth0Id_lte: String

  """All values greater than the given value."""
  auth0Id_gt: String

  """All values greater than or equal the given value."""
  auth0Id_gte: String

  """All values containing the given string."""
  auth0Id_contains: String

  """All values not containing the given string."""
  auth0Id_not_contains: String

  """All values starting with the given string."""
  auth0Id_starts_with: String

  """All values not starting with the given string."""
  auth0Id_not_starts_with: String

  """All values ending with the given string."""
  auth0Id_ends_with: String

  """All values not ending with the given string."""
  auth0Id_not_ends_with: String
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  email_verified: Boolean

  """All values that are not equal to given value."""
  email_verified_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  bio: String

  """All values that are not equal to given value."""
  bio_not: String

  """All values that are contained in given list."""
  bio_in: [String!]

  """All values that are not contained in given list."""
  bio_not_in: [String!]

  """All values less than the given value."""
  bio_lt: String

  """All values less than or equal the given value."""
  bio_lte: String

  """All values greater than the given value."""
  bio_gt: String

  """All values greater than or equal the given value."""
  bio_gte: String

  """All values containing the given string."""
  bio_contains: String

  """All values not containing the given string."""
  bio_not_contains: String

  """All values starting with the given string."""
  bio_starts_with: String

  """All values not starting with the given string."""
  bio_not_starts_with: String

  """All values ending with the given string."""
  bio_ends_with: String

  """All values not ending with the given string."""
  bio_not_ends_with: String
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  stripeId: String

  """All values that are not equal to given value."""
  stripeId_not: String

  """All values that are contained in given list."""
  stripeId_in: [String!]

  """All values that are not contained in given list."""
  stripeId_not_in: [String!]

  """All values less than the given value."""
  stripeId_lt: String

  """All values less than or equal the given value."""
  stripeId_lte: String

  """All values greater than the given value."""
  stripeId_gt: String

  """All values greater than or equal the given value."""
  stripeId_gte: String

  """All values containing the given string."""
  stripeId_contains: String

  """All values not containing the given string."""
  stripeId_not_contains: String

  """All values starting with the given string."""
  stripeId_starts_with: String

  """All values not starting with the given string."""
  stripeId_not_starts_with: String

  """All values ending with the given string."""
  stripeId_ends_with: String

  """All values not ending with the given string."""
  stripeId_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  receiveNotifications: Boolean

  """All values that are not equal to given value."""
  receiveNotifications_not: Boolean
  archived: Boolean

  """All values that are not equal to given value."""
  archived_not: Boolean
  picture: FileWhereInput
  live: LessonWhereInput
  subscriptions_every: TeacherSubscriptionWhereInput
  subscriptions_some: TeacherSubscriptionWhereInput
  subscriptions_none: TeacherSubscriptionWhereInput
  subscribers_every: TeacherSubscriptionWhereInput
  subscribers_some: TeacherSubscriptionWhereInput
  subscribers_none: TeacherSubscriptionWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
}

input UserWhereUniqueInput {
  id: ID
  auth0Id: String
  username: String
  email: String
  stripeId: String
  stripeCustomerId: String
}
